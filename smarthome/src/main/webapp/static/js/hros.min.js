var version   = '3.1.0';        //版本号
var ajaxUrl   = '/cmcp/app';     //所有ajax操作指向页面
var TEMP      = {};
var HROS      = {};

HROS.CONFIG = {
	website         : 'http://' + location.hostname + location.pathname, //网站地址，用于分享应用时调用。一般无需修改
	sinaweiboAppkey : '',       //新浪微博appkey。首页加载会自动初始化，一般无需修改
	tweiboAppkey    : '',       //腾讯微博appkey。首页加载会自动初始化，一般无需修改
	memberID        : 0,        //用户id
	desk            : 1,        //当前显示桌面
	dockPos         : '',       //应用码头位置，参数有：top,left,right
	appXY           : '',       //应用排列方式，参数有：x,y
	appSize         : '',       //图标显示尺寸，参数有：s,m
	appButtonTop    : 20,       //快捷方式top初始位置
	appButtonLeft   : 20,       //快捷方式left初始位置
	windowIndexid   : 10000,    //窗口z-index初始值
	widgetIndexid   : 1,        //挂件z-index初始值
	windowMinWidth  : 215,      //窗口最小宽度
	windowMinHeight : 59,       //窗口最小高度
	wallpaperState  : 1,        //1系统壁纸,2自定义壁纸,3网络壁纸
	wallpaper       : '',       //壁纸
	wallpaperType   : '',       //壁纸显示类型，参数有：tianchong,shiying,pingpu,lashen,juzhong
	wallpaperWidth  : 0,        //壁纸宽度
	wallpaperHeight : 0         //壁纸高度
};

HROS.VAR = {
	zoomLevel       : 1,
	isAppMoving     : false,    //桌面应用是否正在移动中，也就是ajax操作是否正在执行中
	dock            : '',
	desk1           : '',
	desk2           : '',
	desk3           : '',
	desk4           : '',
	desk5           : '',
	folder          : ''
};//桌面应用
var appbtnTemp = template.compile(
	'<li id="<%=id%>" class="appbtn" title="<%=title%>" appid="<%=appid%>" realappid="<%=realappid%>" type="<%=type%>">'+
		'<div><img src="<%=imgsrc%>" alt="<%=title%>"></div>'+
		'<span><%=title%></span>'+
	'</li>'
);
//桌面"添加应用"应用
var addbtnTemp = template.compile(
	'<li class="appbtn add">'+
		'<i class="addicon"></i>'+
		'<span>添加应用</span>'+
	'</li>'
);
//任务栏
var taskTemp = template.compile(
	'<a id="<%=id%>" class="task-item task-item-current" title="<%=title%>" appid="<%=appid%>" realappid="<%=realappid%>" type="<%=type%>">'+
		'<div class="task-item-icon">'+
			'<img src="<%=imgsrc%>" alt="<%=title%>">'+
		'</div>'+
		'<div class="task-item-txt"><%=title%></div>'+
	'</a>'
);
//小挂件
var widgetWindowTemp = template.compile(
	'<div id="<%=id%>" class="widget" appid="<%=appid%>" realappid="<%=realappid%>" type="<%=type%>" style="z-index:<%=zIndex%>;width:<%=width%>px;height:<%=height%>px;top:<%=top%>px;right:<%=right%>px">'+
		'<div class="move">'+
			'<a class="ha-close" href="javascript:;" title="关闭"></a>'+
			'<% if(issetbar){ %>'+
				'<a class="ha-star" href="javascript:;" title="评分"></a>'+
				'<a class="ha-share" href="javascript:;" title="分享"></a>'+
			'<% } %>'+
		'</div>'+
		'<div class="frame">'+
			'<iframe src="<%=url%>" frameborder="0" allowtransparency="true"></iframe>'+
		'</div>'+
	'</div>'
);
//应用窗口
var windowTemp = template.compile(
	'<div id="<%=id%>" class="window-container window-current<% if(isflash){ %> window-container-flash<% } %>" appid="<%=appid%>" realappid="<%=realappid%>" type="<%=type%>" state="show" style="<% if(isopenmax){ %>width:100%;height:100%;<% }else{ %>width:<%=width%>px;height:<%=height%>px;<% } %>z-index:<%=zIndex%>" ismax="<% if(isopenmax){ %>1<% }else{ %>0<% } %>">'+
		'<div style="height:100%">'+
			'<div class="title-bar">'+
				'<img class="icon" src="<%=imgsrc%>" alt="<%=title%>"><span class="title"><%=title%></span>'+
				'<div class="title-handle">'+
					'<a class="ha-hide" btn="hide" href="javascript:;" title="最小化"><b class="hide-b"></b></a>'+
					'<% if(istitlebar){ %>'+
						'<a class="ha-max" btn="max" href="javascript:;" title="最大化" <% if(isopenmax){ %>style="display:none"<% } %>><b class="max-b"></b></a>'+
						'<a class="ha-revert" btn="revert" href="javascript:;" title="还原" <% if(!isopenmax){ %>style="display:none"<% } %>><b class="revert-b"></b><b class="revert-t"></b></a>'+
					'<% } %>'+
					'<% if(istitlebarFullscreen){ %>'+
						'<a class="ha-fullscreen" btn="fullscreen" href="javascript:;" title="全屏">+</a>'+
					'<% } %>'+
					'<a class="ha-close" btn="close" href="javascript:;" title="关闭">×</a>'+
				'</div>'+
			'</div>'+
			'<div class="window-frame">'+
				'<% if(isflash){ %>'+
					'<div class="window-mask"><div class="maskbg"></div><div>运行中，点击恢复显示 :)</div></div>'+
				'<% }else{ %>'+
					'<div class="window-mask window-mask-noflash"></div>'+
				'<% } %>'+
				'<div class="window-loading"></div>'+
				'<iframe id="<%=id%>_iframe" frameborder="0" src="<%=url%>"></iframe>'+
			'</div>'+
			'<div class="set-bar"><div class="fr">'+
				'<% if(issetbar){ %>'+
					'<a class="btn share"><i class="icon icon104"></i><span class="btn-con">分享</span></a>'+
					'<a class="btn star"><i class="icon icon177"></i><span class="btn-con">评分</span></a>'+
					'<a class="btn detail"><i class="icon icon120"></i><span class="btn-con">详情</span></a>'+
				'<% } %>'+
				'<a class="btn refresh" style="background:none;"><i class="icon icon158"></i><span class="btn-con">刷新</span></a>'+
			'</div></div>'+
		'</div>'+
		'<% if(isresize){ %>'+
			'<div class="window-resize window-resize-t" resize="t"></div>'+
			'<div class="window-resize window-resize-r" resize="r"></div>'+
			'<div class="window-resize window-resize-b" resize="b"></div>'+
			'<div class="window-resize window-resize-l" resize="l"></div>'+
			'<div class="window-resize window-resize-rt" resize="rt"></div>'+
			'<div class="window-resize window-resize-rb" resize="rb"></div>'+
			'<div class="window-resize window-resize-lt" resize="lt"></div>'+
			'<div class="window-resize window-resize-lb" resize="lb"></div>'+
		'<% } %>'+
	'</div>'
);
//文件夹窗口
var folderWindowTemp = template.compile(
	'<div id="<%=id%>" class="folder-window window-container window-current" appid="<%=appid%>" realappid="<%=realappid%>" type="<%=type%>" state="show" style="width:<%=width%>px;height:<%=height%>px;z-index:<%=zIndex%>">'+
		'<div style="height:100%">'+
			'<div class="title-bar">'+
				'<img class="icon" src="<%=imgsrc%>" alt="<%=title%>"><span class="title"><%=title%></span>'+
				'<div class="title-handle">'+
					'<a class="ha-hide" btn="hide" href="javascript:;" title="最小化"><b class="hide-b"></b></a>'+
					'<% if(istitlebar){ %>'+
						'<a class="ha-max" btn="max" href="javascript:;" title="最大化"><b class="max-b"></b></a>'+
						'<a class="ha-revert" btn="revert" href="javascript:;" title="还原" style="display:none"><b class="revert-b"></b><b class="revert-t"></b></a>'+
					'<% } %>'+
					'<a class="ha-close" btn="close" href="javascript:;" title="关闭">×</a>'+
				'</div>'+
			'</div>'+
			'<div class="window-frame">'+
				'<div class="folder_body"></div>'+
			'</div>'+
			'<div class="set-bar"><div class="fr">'+
				'<a class="btn refresh" style="background:none;"><i class="icon icon158"></i><span class="btn-con">刷新</span></a>'+
			'</div></div>'+
		'</div>'+
		'<% if(isresize){ %>'+
			'<div class="window-resize window-resize-t" resize="t"></div>'+
			'<div class="window-resize window-resize-r" resize="r"></div>'+
			'<div class="window-resize window-resize-b" resize="b"></div>'+
			'<div class="window-resize window-resize-l" resize="l"></div>'+
			'<div class="window-resize window-resize-rt" resize="rt"></div>'+
			'<div class="window-resize window-resize-rb" resize="rb"></div>'+
			'<div class="window-resize window-resize-lt" resize="lt"></div>'+
			'<div class="window-resize window-resize-lb" resize="lb"></div>'+
		'<% } %>'+
	'</div>'
);
//文件夹预览
var folderViewTemp = template.compile(
	'<div id="<%=id%>" class="quick_view_container" appid="<%=appid%>" realappid="<%=realappid%>" style="top:<%=top%>px;left:<%=left%>px">'+
		'<div class="perfect_nine_box">'+
			'<div class="perfect_nine_t">'+
				'<div class="perfect_nine_t_m"></div>'+
			'</div>'+
			'<span class="perfect_nine_t_l"></span>'+
			'<span class="perfect_nine_t_r"></span>'+
			'<div class="perfect_nine_middle">'+
				'<span class="perfect_nine_m_l">'+
					'<div class="perfect_nine_m_l_t" style="top:0px;height:<%=mlt%>px"></div>'+
					'<div class="perfect_nine_m_l_m" style="top:<%=mlt%>px;height:20px;display:<% if(mlm){ %>block<% }else{ %>none<% } %>"></div>'+
					'<div class="perfect_nine_m_l_b" style="top:<% if(mlm){ %><%=mlt+20%><% }else{ %><%=mlt%><% } %>px;height:<%=mlb%>px"></div>'+
				'</span>'+
				'<span class="perfect_nine_m_r">'+
					'<div class="perfect_nine_m_r_t" style="top:0px;height:<%=mrt%>px"></div>'+
					'<div class="perfect_nine_m_r_m" style="top:<%=mrt%>px;height:20px;display:<% if(mrm){ %>block<% }else{ %>none<% } %>"></div>'+
					'<div class="perfect_nine_m_r_b" style="top:<% if(mrm){ %><%=mrt+20%><% }else{ %><%=mrt%><% } %>px;height:<%=mrb%>px"></div>'+
				'</span>'+
				'<div class="perfect_nine_context">'+
					'<div class="quick_view_container_control">'+
						'<a href="javascript:;" class="quick_view_container_open">打开</a>'+
					'</div>'+
					'<div class="quick_view_container_list" id="quick_view_container_list_<%=appid%>" realid="<%=appid%>">'+
						'<div class="quick_view_container_list_in" id="quick_view_container_list_in_<%=appid%>" style="height:<%=height%>px">'+
							'<%==apps%>'+
						'</div>'+
						'<div class="scrollBar"></div>'+
						'<div class="scrollBar_bgc"></div>'+
					'</div>'+
				'</div>'+
			'</div>'+
			'<div class="perfect_nine_b">'+
				'<div class="perfect_nine_b_m"></div>'+
			'</div>'+
			'<span class="perfect_nine_b_l"></span>'+
			'<span class="perfect_nine_b_r"></span>'+
		'</div>'+
	'</div>'
);
//搜索结果列表
var suggestTemp = template.compile(
	'<li class="resultList" appid="<%=appid%>" realappid="<%=realappid%>" type="<%=type%>">'+
		'<a href="javascript:;"><div><%=name%></div></a>'+
	'</li>'
);
//新建&修改文件夹窗口
var editFolderDialogTemp = template.compile(
	'<div id="addfolder">'+
		'<a class="folderSelector"><img src="<%=src%>"></a>'+
		'<div class="folderNameTxt">请输入文件夹名称：</div>'+
		'<div class="folderInput"><input type="text" class="folderName" id="folderName" value="<%=name%>"></div>'+
		'<div class="folderNameError">文件夹名称不能只包含空字符</div>'+
		'<div class="fcDropdown">'+
			'<a class="fcDropdown_item" title="默认"><img class="fcDropdown_img" src="img/ui/folder_default.png"></a>'+
			'<a class="fcDropdown_item" title="文本"><img class="fcDropdown_img" src="img/ui/folder_doc.png"></a>'+
			'<a class="fcDropdown_item" title="游戏"><img class="fcDropdown_img" src="img/ui/folder_game.png"></a>'+
			'<a class="fcDropdown_item" title="生活"><img class="fcDropdown_img" src="img/ui/folder_life.png"></a>'+
			'<a class="fcDropdown_item" title="音乐"><img class="fcDropdown_img" src="img/ui/folder_music.png"></a>'+
			'<a class="fcDropdown_item" title="工具"><img class="fcDropdown_img" src="img/ui/folder_tool.png"></a>'+
			'<a class="fcDropdown_item" title="视频"><img class="fcDropdown_img" src="img/ui/folder_video.png"></a>'+
		'</div>'+
	'</div>'
);
//应用评分
var starDialogTemp = template.compile(
	'<div id="star">'+
		'<div class="grade-box">'+
			'<div class="star-num"><%=point%></div>'+
			'<div class="star-box">'+
				'<div>打分：</div>'+
				'<i style="width:<%=realpoint%>%"></i>'+
				'<ul>'+
					'<li class="grade-1" num="1"><a href="javascript:;"><em>很不好用</em></a></li>'+
					'<li class="grade-2" num="2"><a href="javascript:;"><em>体验一般般</em></a></li>'+
					'<li class="grade-3" num="3"><a href="javascript:;"><em>比较好用</em></a></li>'+
					'<li class="grade-4" num="4"><a href="javascript:;"><em>很好用</em></a></li>'+
					'<li class="grade-5" num="5"><a href="javascript:;"><em>棒极了，推荐</em></a></li>'+
				'</ul>'+
			'</div>'+
		'</div>'+
	'</div>'
);
//分享
var shareDialogTemp = template.compile(
	'<div id="share">'+
		'<a class="tsina" href="http://service.weibo.com/share/share.php?title=<%=title%>&url=<%=url%>&searchPic=true&appkey=<%=sinaweiboAppkey%>" target="_blank">新浪微博</a>'+
		'<a class="tqq" href="http://v.t.qq.com/share/share.php?title=<%=title%>&url=<%=url%>&appkey=<%=tweiboAppkey%>" target="_blank">腾讯微博</a>'+
		'<a class="tsohu" href="http://t.sohu.com/third/post.jsp?url=<%=url%>&title=<%=title%>&content=utf-8" target="_blank">搜狐微博</a>'+
		'<a class="twangyi" href="http://t.163.com/article/user/checkLogin.do?info=<%=title%>+<%=url%>" target="_blank">网易微博</a>'+
		'<a class="qzone" href="http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url=<%=url%>&title=<%=title%>" target="_blank">QQ空间</a>'+
		'<a class="renren" href="http://share.renren.com/share/buttonshare.do?link=<%=url%>&title=<%=title%>" target="_blank">人人网</a>'+
		'<a class="baidu" href="http://cang.baidu.com/do/add?it=<%=title%>&iu=<%=url%>" target="_blank">百度收藏</a>'+
		'<a class="douban" href="http://shuo.douban.com/!service/share?image=&href=<%=url%>&name=<%=title%>" target="_blank">豆瓣</a>'+
	'</div>'
);
//锁定
var lockTemp = template.compile(
	'<div id="lock">'+
		'<div class="title">'+
			'<div class="time"></div>'+
			'<div class="week"></div>'+
		'</div>'+
		'<div id="lock-info">'+
			'<div class="img"><img src="<%=avatar%>" title="<%=username%>" alt="<%=username%>"></img></div>'+
			'<div class="text"><input type="password" class="mousetrap" id="lockpassword" placeholder="请输入解锁密码"></div>'+
			'<div class="text-tip"></div>'+
			'<div class="text"><input type="button" id="lockbtn" value="解 锁"></div>'+
		'</div>'+
		'<div class="tip">点击屏幕，开启解锁</div>'+
	'</div>'
);
//上传文件窗口
var uploadFileDialogTemp = template.compile(
	'<div id="uploadfilebtnbox">'+
		'请选择文件<input type="file" name="xfile[]" id="uploadfilebtn" />'+
	'</div>'+
	'<div id="uploadfile"><%=list%></div>'
);
var uploadFileDialogListTemp = template.compile(
	'<% for(var i = 0; i < list.length; i++){ %>'+
		'<div class="filelist">'+
			'<div class="name" title="<%=list[i].name%>"><div style="width:10000px"><%=list[i].name%></div></div>'+
			'<div class="size"><%=list[i].size%></div>'+
			'<div class="do">[&nbsp;<a href="javascript:;" class="del">删</a>&nbsp;]</div>'+
			'<div class="progress"></div>'+
		'</div>'+
	'<% } %>'
);
//新手帮助提示
//var helpTemp = template.compile(
//	'<div id="help">'+
//		'<a href="javascript:;" class="close" title="关闭新手帮助">×</a>'+
//		'<div id="step1" class="step" step="1" style="position:relative;left:50%;top:50%;margin-left:-160px;margin-top:-60px;width:280px;height:100px">'+
//			'<p style="text-align:center">'+
//				'<span class="h2">欢迎使用HoorayOS</span>'+
//				'<br>下面我会简单介绍下如何使用，以便你快速上手<br>'+
//				'<a href="javascript:;" class="next">下一步</a>'+
//			'</p>'+
//		'</div>'+
//		'<div id="step2" class="step" step="2" style="top:90px;left:140px;width:250px">'+
//			'<b class="jt jt_left" style="left:-40px;top:20px"></b>'+
//			'<p>'+
//				'<span class="h1">①</span><span class="h2">桌面</span>'+
//				'<br>可以在应用中心添加自己需要的应用到桌面<br>'+
//				'<a href="javascript:;" class="next">下一步</a>'+
//			'</p>'+
//		'</div>'+
//		'<div id="step3" class="step" step="3" style="top:90px;left:50%;margin-left:-125px;width:250px">'+
//			'<b class="jt jt_top" style="top:-40px;left:30px"></b>'+
//			'<p>'+
//				'<span class="h1">②</span><span class="h2">应用码头</span>'+
//				'<br>可以将桌面应用拖放到这<br>'+
//				'<a href="javascript:;" class="next">下一步</a>'+
//			'</p>'+
//		'</div>'+
//		'<div id="step4" class="step" step="4" style="top:130px;left:50%;margin-left:-125px;width:250px">'+
//			'<b class="jt jt_top" style="top:-40px;left:30px"></b>'+
//			'<p>'+
//				'<span class="h1">③</span><span class="h2">翻页导航</span>'+
//				'<br>可以快速切换当前桌面<br>'+
//				'<a href="javascript:;" class="next">下一步</a>'+
//			'</p>'+
//		'</div>'+
//		'<div id="step5" class="step" step="5" style="bottom:50px;left:50%;margin-left:-125px;width:250px">'+
//			'<b class="jt jt_bottom" style="bottom:-40px;left:30px"></b>'+
//			'<p>'+
//				'<span class="h1">④</span><span class="h2">任务栏</span>'+
//				'<br>这个就不用我介绍了吧 =)<br>'+
//				'<a href="javascript:;" class="over">&nbsp;完&nbsp;成&nbsp;</a>'+
//			'</p>'+
//		'</div>'+
//	'</div>'
//);
/*
**  应用
*/
HROS.app = (function(){
	return {
		/*
		**  初始化桌面应用
		*/
		init : function(){
			//绑定'应用市场'点击事件
			$('#desk').on('click', 'li.add', function(){
				HROS.window.createTemp({
					appid : 'hoorayos-yysc',
					title : '应用市场',
					url : 'sysapp/appmarket/index.php',
					width : 800,
					height : 484,
					isflash : false
				});
			});
			//绑定应用拖动事件
			HROS.app.move();
			//绑定滚动条拖动事件
			HROS.app.moveScrollbar();
			//绑定应用右击事件
			$('body').on('contextmenu', '.appbtn:not(.add)', function(e){
				HROS.popupMenu.hide();
				var popupmenu;
				switch($(this).attr('type')){
					case 'window':
					case 'widget':
						popupmenu = HROS.popupMenu.app($(this));
						break;
					case 'pwindow':
					case 'pwidget':
						popupmenu = HROS.popupMenu.papp($(this));
						break;
					case 'folder':
						popupmenu = HROS.popupMenu.folder($(this));
						break;
				}
				var l = ($(window).width() - e.clientX) < popupmenu.width() ? (e.clientX - popupmenu.width()) : e.clientX;
				var t = ($(window).height() - e.clientY) < popupmenu.height() ? (e.clientY - popupmenu.height()) : e.clientY;
				popupmenu.css({
					left : l,
					top : t
				}).show();
				return false;
			});
			HROS.app.get();
		},
		/*
		**  更新应用排列方式
		*/
		updateXY : function(i){
			if(HROS.CONFIG.appXY != i){
				HROS.CONFIG.appXY = i;
				HROS.deskTop.resize();
				if(HROS.base.checkLogin()){
					$.ajax({
						type : 'POST',
						url : ajaxUrl,
						data : 'ac=setAppXY&appxy=' + i
					});
				}
			}
		},
		/*
		**  更新应用显示尺寸
		*/
		updateSize : function(i){
			if(HROS.CONFIG.appSize != i){
				HROS.CONFIG.appSize = i;
				HROS.deskTop.resize();
				if(HROS.base.checkLogin()){
					$.ajax({
						type : 'POST',
						url : ajaxUrl,
						data : 'ac=setAppSize&appsize=' + i
					});
				}
			}
		},
		/*
		**  获取桌面应用数据
		*/
		get : function(){
			//获取json数组并循环输出每个应用
			$.ajax({
				type : 'POST',
				url : ajaxUrl,
				data : 'ac=getMyApp',
				beforeSend : function(){
					HROS.VAR.isAppMoving = true;
				}
			}).done(function(sc){
				HROS.VAR.isAppMoving = false;
				sc = $.parseJSON(sc);
				HROS.VAR.dock = sc['dock'];
				HROS.VAR.desk1 = sc['desk1'];
				HROS.VAR.desk2 = sc['desk2'];
				HROS.VAR.desk3 = sc['desk3'];
				HROS.VAR.desk4 = sc['desk4'];
				HROS.VAR.desk5 = sc['desk5'];
				HROS.VAR.folder = sc['folder'];
				//输出桌面应用
				HROS.app.set();
			});
		},
		/*
		**  渲染桌面，输出应用
		*/
		set : function(){
			//加载应用码头应用
			var dock_append = '';
			if(HROS.VAR.dock != ''){
				$(HROS.VAR.dock).each(function(){
					dock_append += appbtnTemp({
						'title' : this.name,
						'type' : this.type,
						'id' : 'd_' + this.appid,
						'appid' : this.appid,
						'realappid' : this.realappid == 0 ? this.appid : this.realappid,
						'imgsrc' : this.icon
					});
				});
			}
			$('#dock-bar .dock-applist li').remove();
			$('#dock-bar .dock-applist').append(dock_append);
			//加载桌面应用
			for(var j = 1; j <= 5; j++){
				var desk_append = '';
				var desk = eval('HROS.VAR.desk' + j);
				if(desk != ''){
					$(desk).each(function(){
						desk_append += appbtnTemp({
							'title' : this.name,
							'type' : this.type,
							'id' : 'd_' + this.appid,
							'appid' : this.appid,
							'realappid' : this.realappid == 0 ? this.appid : this.realappid,
							'imgsrc' : this.icon
						});
					});
				}
				desk_append += addbtnTemp();
				$('#desk-' + j + ' li').remove();
				$('#desk-' + j + ' .desktop-apps-container').append(desk_append);
			}
			HROS.app.setPos(false);
			//如果文件夹预览面板为显示状态，则进行更新
			$('body .quick_view_container').each(function(){
				HROS.folderView.get($('#d_' + $(this).attr('appid')));
			});
			//如果文件夹窗口为显示状态，则进行更新
			$('#desk .folder-window').each(function(){
				HROS.window.updateFolder($(this).attr('appid'));
			});
			//加载滚动条
			HROS.app.getScrollbar();
		},
		setPos : function(isAnimate){
			isAnimate = isAnimate == null ? true : isAnimate;
			if($('#desk').hasClass('smallIcon')){
				$('#desk').removeClass('smallIcon');
			}
			if(HROS.CONFIG.appSize == 's'){
				$('#desk').addClass('smallIcon');
			}
			var grid = HROS.grid.getAppGrid(), dockGrid = HROS.grid.getDockAppGrid();
			$('#dock-bar .dock-applist li').each(function(i){
				$(this).css({
					'top' : HROS.CONFIG.dockPos == 'top' ? dockGrid[i]['startY'] : dockGrid[i]['startY'] + 5,
					'left' : HROS.CONFIG.dockPos == 'top' ? dockGrid[i]['startX'] + 5 : dockGrid[i]['startX']
				}).attr('top', $(this).offset().top).attr('left', $(this).offset().left);
			});
			for(var j = 1; j <= 5; j++){
				$('#desk-' + j + ' li').each(function(i){
					var offsetTop = 7;
					var offsetLeft = 16;
					if(HROS.CONFIG.appSize == 's'){
						offsetTop = 11;
						offsetLeft = 21;
					}
					var top = grid[i]['startY'] + offsetTop;
					var left = grid[i]['startX'] + offsetLeft;
					$(this).stop(true, false).animate({
						'top' : top,
						'left' : left
					}, isAnimate ? 500 : 0);
					switch(HROS.CONFIG.dockPos){
						case 'top':
							$(this).attr('left', left).attr('top', top + $('#dock-bar').height());
							break;
						case 'left':
							$(this).attr('left', left + $('#dock-bar').width()).attr('top', top);
							break;
						default:
							$(this).attr('left', left).attr('top', top);
					}
				});
			}
			//更新滚动条
			HROS.app.getScrollbar();
		},
		/*
		**  添加应用
		*/
		add : function(id, callback){
			function done(){
				callback && callback();
			}
			if(HROS.base.checkLogin()){
				$.ajax({
					type : 'POST',
					url : ajaxUrl,
					data : 'ac=addMyApp&id=' + id + '&desk=' + HROS.CONFIG.desk
				}).done(function(responseText){
					done();
				});
			}else{
				done();
			}
		},
		/*
		**  删除应用
		*/
		remove : function(id, callback){
			function done(){
				HROS.widget.removeCookie(id);
				callback && callback();
			}
			if(HROS.base.checkLogin()){
				$.ajax({
					type : 'POST',
					url : ajaxUrl,
					data : 'ac=delMyApp&id=' + id
				}).done(function(responseText){
					done();
				});
			}else{
				done();
			}
		},
		/*
		**  应用拖动、打开
		**  这块代码略多，主要处理了9种情况下的拖动，分别是：
		**  桌面拖动到应用码头、桌面拖动到文件夹内、当前桌面上拖动(排序)
		**  应用码头拖动到桌面、应用码头拖动到文件夹内、应用码头上拖动(排序)
		**  文件夹内拖动到桌面、文件夹内拖动到应用码头、不同文件夹之间拖动
		*/
		move : function(){
			//应用码头应用拖动
			$('#dock-bar .dock-applist').on('mousedown', 'li', function(e){
				e.preventDefault();
				e.stopPropagation();
				if(e.button == 0 || e.button == 1){
					var oldobj = $(this);
					var obj = $('<li id="shortcut_shadow">' + oldobj.html() + '</li>');
					var dx = e.clientX;
					var dy = e.clientY;
					var cx = e.clientX;
					var cy = e.clientY;
					var x = dx - oldobj.offset().left;
					var y = dy - oldobj.offset().top;
					var lay = HROS.maskBox.desk();
					//绑定鼠标移动事件
					$(document).on('mousemove', function(e){
						$('body').append(obj);
						lay.show();
						cx = e.clientX <= 0 ? 0 : e.clientX >= $(window).width() ? $(window).width() : e.clientX;
						cy = e.clientY <= 0 ? 0 : e.clientY >= $(window).height() ? $(window).height() : e.clientY;
						if(dx != cx || dy != cy){
							obj.css({
								left : cx - x,
								top : cy - y
							}).show();
						}
					}).on('mouseup', function(){
						$(document).off('mousemove').off('mouseup');
						obj.remove();
						lay.hide();
						//判断是否移动应用，如果没有则判断为click事件
						if(dx == cx && dy == cy){
							switch(oldobj.attr('type')){
								case 'window':
								case 'pwindow':
									HROS.window.create(oldobj.attr('realappid'), oldobj.attr('type'));
									break;
								case 'widget':
								case 'pwidget':
									HROS.widget.create(oldobj.attr('realappid'), oldobj.attr('type'));
									break;
								case 'folder':
									HROS.folderView.get(oldobj);
									break;
							}
							return false;
						}
						var movegrid = HROS.grid.searchFolderGrid(cx, cy);
						if(movegrid != null){
							if(oldobj.hasClass('folder') == false){
								var id = oldobj.attr('appid');
								var from = oldobj.index();
								var to = movegrid;
								if(HROS.base.checkLogin()){
									if(!HROS.app.checkIsMoving()){
										if(HROS.app.dataDockToFolder(id, from, to)){
											$.ajax({
												type : 'POST',
												url : ajaxUrl,
												data : 'ac=moveMyApp&movetype=dock-folder&id=' + id + '&from=' + from + '&to=' + to
											}).done(function(responseText){
												HROS.VAR.isAppMoving = false;
											});
										}
									}
								}else{
									HROS.app.dataDockToFolder(id, from, to);
								}
							}
						}else{
							var dock_w = HROS.CONFIG.dockPos == 'left' ? 0 : HROS.CONFIG.dockPos == 'top' ? ($(window).width() - $('#dock-container').width() + 20) / 2 : $(window).width() - $('#dock-container').width();
							var dock_h = HROS.CONFIG.dockPos == 'top' ? 0 : ($(window).height() - $('#dock-container').height() + 20) / 2;
							var movegrid = HROS.grid.searchDockAppGrid(cx - dock_w, cy - dock_h);
							if(movegrid != null){
								if(movegrid != oldobj.index()){
									var movegrid2 = HROS.grid.searchDockAppGrid2(cx - dock_w, cy - dock_h);
									var id = oldobj.attr('appid');
									var from = oldobj.index();
									var to = movegrid;
									var boa = movegrid2 % 2 == 0 ? 'b' : 'a';
									if(HROS.base.checkLogin()){
										if(!HROS.app.checkIsMoving()){
											if(HROS.app.dataDockToDock(id, from, to, boa)){
												$.ajax({
													type : 'POST',
													url : ajaxUrl,
													data : 'ac=moveMyApp&movetype=dock-dock&id=' + id + '&from=' + from + '&to=' + to + '&boa=' + boa
												}).done(function(responseText){
													HROS.VAR.isAppMoving = false;
												});
											}
										}
									}else{
										HROS.app.dataDockToDock(id, from, to, boa);
									}
								}
							}else{
								var dock_w = HROS.CONFIG.dockPos == 'left' ? $('#dock-bar').width() : 0;
								var dock_h = HROS.CONFIG.dockPos == 'top' ? $('#dock-bar').height() : 0;
								var deskScrollLeft = $('#desk-' + HROS.CONFIG.desk + ' .desktop-apps-container').scrollLeft();
								var deskScrollTop = $('#desk-' + HROS.CONFIG.desk + ' .desktop-apps-container').scrollTop();
								var movegrid = HROS.grid.searchAppGrid(cx - dock_w + deskScrollLeft, cy - dock_h + deskScrollTop);
								if(movegrid != null){
									var movegrid2 = HROS.grid.searchAppGrid2(cx - dock_w + deskScrollLeft, cy - dock_h + deskScrollTop);
									var id = oldobj.attr('appid');
									var from = oldobj.index();
									var to = movegrid;
									var boa = movegrid2 % 2 == 0 ? 'b' : 'a';
									var desk = HROS.CONFIG.desk;
									if(HROS.base.checkLogin()){
										if(!HROS.app.checkIsMoving()){
											if(HROS.app.dataDockToDesk(id, from, to, boa, desk)){
												$.ajax({
													type : 'POST',
													url : ajaxUrl,
													data : 'ac=moveMyApp&movetype=dock-desk&id=' + id + '&from=' + from + '&to=' + to + '&boa=' + boa + '&desk=' + desk
												}).done(function(responseText){
													HROS.VAR.isAppMoving = false;
												});
											}
										}
									}else{
										HROS.app.dataDockToDesk(id, from, to, boa, desk);
									}
								}
							}
						}
					});
				}
			});
			//桌面应用拖动
			$('#desktop .desktop-apps-container').on('mousedown', 'li:not(.add)', function(e){
				e.preventDefault();
				e.stopPropagation();
				if(e.button == 0 || e.button == 1){
					var oldobj = $(this);
					var obj = $('<li id="shortcut_shadow">' + oldobj.html() + '</li>');
					var dx = e.clientX;
					var dy = e.clientY;
					var cx = e.clientX;
					var cy = e.clientY;
					var x = dx - oldobj.offset().left;
					var y = dy - oldobj.offset().top;
					var lay = HROS.maskBox.desk();
					//绑定鼠标移动事件
					$(document).on('mousemove', function(e){
						$('body').append(obj);
						lay.show();
						cx = e.clientX <= 0 ? 0 : e.clientX >= $(window).width() ? $(window).width() : e.clientX;
						cy = e.clientY <= 0 ? 0 : e.clientY >= $(window).height() ? $(window).height() : e.clientY;
						if(dx != cx || dy != cy){
							obj.css({
								left : cx - x,
								top : cy - y
							}).show();
						}
					}).on('mouseup', function(){
						$(document).off('mousemove').off('mouseup');
						obj.remove();
						lay.hide();
						//判断是否移动应用，如果没有则判断为click事件
						if(dx == cx && dy == cy){
							switch(oldobj.attr('type')){
								case 'window':
								case 'pwindow':
									HROS.window.create(oldobj.attr('realappid'), oldobj.attr('type'));
									break;
								case 'widget':
								case 'pwidget':
									HROS.widget.create(oldobj.attr('realappid'), oldobj.attr('type'));
									break;
								case 'folder':
									HROS.folderView.get(oldobj);
									break;
							}
							return false;
						}
						var movegrid = HROS.grid.searchFolderGrid(cx, cy);
						if(movegrid != null){
							if(oldobj.attr('type') != 'folder'){
								var id = oldobj.attr('appid');
								var from = oldobj.index();
								var to = movegrid;
								var desk = HROS.CONFIG.desk;
								if(HROS.base.checkLogin()){
									if(!HROS.app.checkIsMoving()){
										if(HROS.app.dataDeskToFolder(id, from, to, desk)){
											$.ajax({
												type : 'POST',
												url : ajaxUrl,
												data : 'ac=moveMyApp&movetype=desk-folder&id=' + id + '&from=' + from + '&to=' + to + '&desk=' + desk
											}).done(function(responseText){
												HROS.VAR.isAppMoving = false;
											});
										}
									}
								}else{
									HROS.app.dataDeskToFolder(id, from, to, desk);
								}
							}
						}else{
							var dock_w = HROS.CONFIG.dockPos == 'left' ? 0 : HROS.CONFIG.dockPos == 'top' ? ($(window).width() - $('#dock-container').width() + 20) / 2 : $(window).width() - $('#dock-container').width();
							var dock_h = HROS.CONFIG.dockPos == 'top' ? 0 : ($(window).height() - $('#dock-container').height() + 20) / 2;
							var movegrid = HROS.grid.searchDockAppGrid(cx - dock_w, cy - dock_h);
							if(movegrid != null){
								var movegrid2 = HROS.grid.searchDockAppGrid2(cx - dock_w, cy - dock_h);
								var id = oldobj.attr('appid');
								var from = oldobj.index();
								var to = movegrid;
								var boa = movegrid2 % 2 == 0 ? 'b' : 'a';
								var desk = HROS.CONFIG.desk;
								if(HROS.base.checkLogin()){
									if(!HROS.app.checkIsMoving()){
										if(HROS.app.dataDeskToDock(id, from, to, boa, desk)){
											$.ajax({
												type : 'POST',
												url : ajaxUrl,
												data : 'ac=moveMyApp&movetype=desk-dock&id=' + id + '&from=' + from + '&to=' + to + '&boa=' + boa + '&desk=' + desk
											}).done(function(responseText){
												HROS.VAR.isAppMoving = false;
											});
										}
									}
								}else{
									HROS.app.dataDeskToDock(id, from, to, boa, desk);
								}
							}else{
								var dock_w = HROS.CONFIG.dockPos == 'left' ? $('#dock-bar').width() : 0;
								var dock_h = HROS.CONFIG.dockPos == 'top' ? $('#dock-bar').height() : 0;
								var deskScrollLeft = $('#desk-' + HROS.CONFIG.desk + ' .desktop-apps-container').scrollLeft();
								var deskScrollTop = $('#desk-' + HROS.CONFIG.desk + ' .desktop-apps-container').scrollTop();
								var movegrid = HROS.grid.searchAppGrid(cx - dock_w + deskScrollLeft, cy - dock_h + deskScrollTop);
								if(movegrid != null && movegrid != oldobj.index()){
									var movegrid2 = HROS.grid.searchAppGrid2(cx - dock_w + deskScrollLeft, cy - dock_h + deskScrollTop);
									var id = oldobj.attr('appid');
									var from = oldobj.index();
									var to = movegrid;
									var boa = movegrid2 % 2 == 0 ? 'b' : 'a';
									var desk = HROS.CONFIG.desk;
									if(HROS.base.checkLogin()){
										if(!HROS.app.checkIsMoving()){
											if(HROS.app.dataDeskToDesk(id, from, to, boa, desk)){
												$.ajax({
													type : 'POST',
													url : ajaxUrl,
													data : 'ac=moveMyApp&movetype=desk-desk&id=' + id + '&from=' + from + '&to=' + to + '&boa=' + boa + '&desk=' + desk
												}).done(function(responseText){
													HROS.VAR.isAppMoving = false;
												});
											}
										}
									}else{
										HROS.app.dataDeskToDesk(id, from, to, boa, desk);
									}
								}
							}
						}
					});
				}
			});
			//文件夹内应用拖动
			$('body').on('mousedown', '.folder_body li, .quick_view_container li', function(e){
				e.preventDefault();
				e.stopPropagation();
				if(e.button == 0 || e.button == 1){
					var oldobj = $(this);
					var obj = $('<li id="shortcut_shadow">' + oldobj.html() + '</li>');
					var dx = e.clientX;
					var dy = e.clientY;
					var cx = e.clientX;
					var cy = e.clientY;
					var x = dx - oldobj.offset().left;
					var y = dy - oldobj.offset().top;
					var lay = HROS.maskBox.desk();
					//绑定鼠标移动事件
					$(document).on('mousemove', function(e){
						$('body').append(obj);
						lay.show();
						cx = e.clientX <= 0 ? 0 : e.clientX >= $(window).width() ? $(window).width() : e.clientX;
						cy = e.clientY <= 0 ? 0 : e.clientY >= $(window).height() ? $(window).height() : e.clientY;
						if(dx != cx || dy != cy){
							obj.css({
								left : cx - x,
								top : cy - y
							}).show();
						}
					}).on('mouseup', function(){
						$(document).off('mousemove').off('mouseup');
						obj.remove();
						lay.hide();
						//判断是否移动应用，如果没有则判断为click事件
						if(dx == cx && dy == cy){
							switch(oldobj.attr('type')){
								case 'window':
								case 'pwindow':
									HROS.window.create(oldobj.attr('realappid'), oldobj.attr('type'));
									break;
								case 'widget':
								case 'pwidget':
									HROS.widget.create(oldobj.attr('realappid'), oldobj.attr('type'));
									break;
							}
							return false;
						}
						var movegrid = HROS.grid.searchFolderGrid(cx, cy);
						if(movegrid != null){
							if(oldobj.parents('.folder-window').attr('appid') != movegrid){
								var id = oldobj.attr('appid');
								var from = oldobj.index();
								var to = movegrid;
								var fromFolderId = oldobj.parents('.folder-window').attr('appid') || oldobj.parents('.quick_view_container').attr('appid');
								if(HROS.base.checkLogin()){
									if(!HROS.app.checkIsMoving()){
										if(HROS.app.dataFolderToFolder(id, from, to, fromFolderId)){
											$.ajax({
												type : 'POST',
												url : ajaxUrl,
												data : 'ac=moveMyApp&movetype=folder-folder&id=' + id + '&from=' + from + '&to=' + to
											}).done(function(responseText){
												HROS.VAR.isAppMoving = false;
											});
										}
									}
								}else{
									HROS.app.dataFolderToFolder(id, from, to, fromFolderId);
								}
							}
						}else{
							var dock_w = HROS.CONFIG.dockPos == 'left' ? 0 : HROS.CONFIG.dockPos == 'top' ? ($(window).width() - $('#dock-container').width() + 20) / 2 : $(window).width() - $('#dock-container').width();
							var dock_h = HROS.CONFIG.dockPos == 'top' ? 0 : ($(window).height() - $('#dock-container').height() + 20) / 2;
							var movegrid = HROS.grid.searchDockAppGrid(cx - dock_w, cy - dock_h);
							if(movegrid != null){
								var movegrid2 = HROS.grid.searchDockAppGrid2(cx - dock_w, cy - dock_h);
								var id = oldobj.attr('appid');
								var from = oldobj.index();
								var to = movegrid;
								var fromFolderId = oldobj.parents('.folder-window').attr('appid') || oldobj.parents('.quick_view_container').attr('appid');
								var boa = movegrid2 % 2 == 0 ? 'b' : 'a';
								var desk = HROS.CONFIG.desk;
								if(HROS.base.checkLogin()){
									if(!HROS.app.checkIsMoving()){
										if(HROS.app.dataFolderToDock(id, from, to, fromFolderId, boa, desk)){
											$.ajax({
												type : 'POST',
												url : ajaxUrl,
												data : 'ac=moveMyApp&movetype=folder-dock&id=' + id + '&to=' + to + '&boa=' + boa + '&desk=' + desk
											}).done(function(responseText){
												HROS.VAR.isAppMoving = false;
											});
										}
									}
								}else{
									HROS.app.dataFolderToDock(id, from, to, fromFolderId, boa, desk);
								}
							}else{
								var dock_w = HROS.CONFIG.dockPos == 'left' ? $('#dock-bar').width() : 0;
								var dock_h = HROS.CONFIG.dockPos == 'top' ? $('#dock-bar').height() : 0;
								var deskScrollLeft = $('#desk-' + HROS.CONFIG.desk + ' .desktop-apps-container').scrollLeft();
								var deskScrollTop = $('#desk-' + HROS.CONFIG.desk + ' .desktop-apps-container').scrollTop();
								var movegrid = HROS.grid.searchAppGrid(cx - dock_w + deskScrollLeft, cy - dock_h + deskScrollTop);
								if(movegrid != null){
									var movegrid2 = HROS.grid.searchAppGrid2(cx - dock_w + deskScrollLeft, cy - dock_h + deskScrollTop);
									var id = oldobj.attr('appid');
									var from = oldobj.index();
									var to = movegrid;
									var fromFolderId = oldobj.parents('.folder-window').attr('appid') || oldobj.parents('.quick_view_container').attr('appid');
									var boa = movegrid2 % 2 == 0 ? 'b' : 'a';
									var desk = HROS.CONFIG.desk;
									if(HROS.base.checkLogin()){
										if(!HROS.app.checkIsMoving()){
											if(HROS.app.dataFolderToDesk(id, from, to, fromFolderId, boa, desk)){
												$.ajax({
													type : 'POST',
													url : ajaxUrl,
													data : 'ac=moveMyApp&movetype=folder-desk&id=' + id + '&to=' + to + '&boa=' + boa + '&desk=' + desk
												}).done(function(responseText){
													HROS.VAR.isAppMoving = false;
												});
											}
										}
									}else{
										HROS.app.dataFolderToDesk(id, from, to, fromFolderId, boa, desk);
									}
								}
							}
						}
					});
				}
			});
		},
		/*
		**  加载滚动条
		*/
		getScrollbar : function(){
			setTimeout(function(){
				$('#desk .desktop-container').each(function(){
					var desk = $(this).children('.desktop-apps-container'), scrollbar = $(this).children('.scrollbar');
					var scrollbarLeft = desk.nextAll('.scrollbar-x').position().left, scrollbarTop = desk.nextAll('.scrollbar-y').position().top;
					//先清空所有附加样式
					scrollbar.hide();
					desk.scrollLeft(0).scrollTop(0);
					/*
					**  判断应用排列方式
					**  横向排列超出屏幕则出现纵向滚动条，纵向排列超出屏幕则出现横向滚动条
					*/
					if(HROS.CONFIG.appXY == 'x'){
						/*
						**  获得桌面应用定位好后的实际高度
						**  因为显示的高度是固定的，而实际的高度是根据应用个数会变化
						*/
						var deskH = parseInt(desk.children('.add').css('top')) + 108;
						/*
						**  计算滚动条高度
						**  高度公式（应用纵向排列计算滚动条宽度以此类推）：
						**  滚动条实际高度 = 桌面显示高度 / 桌面实际高度 * 滚动条总高度(桌面显示高度)
						**  如果“桌面显示高度 / 桌面实际高度 >= 1”说明应用个数未能超出桌面，则不需要出现滚动条
						*/
						if(desk.height() / deskH < 1){
							desk.nextAll('.scrollbar-y').height(desk.height() / deskH * desk.height());
							scrollbarTop = scrollbarTop + desk.nextAll('.scrollbar-y').height() > desk.height() ? desk.height() - desk.nextAll('.scrollbar-y').height() : scrollbarTop;
							desk.nextAll('.scrollbar-y').css('top', scrollbarTop).show();
							desk.scrollTop(scrollbarTop / desk.height() * deskH);
						}
					}else{
						var deskW = parseInt(desk.children('.add').css('left')) + 106;
						if(desk.width() / deskW < 1){
							desk.nextAll('.scrollbar-x').width(desk.width() / deskW * desk.width());
							scrollbarLeft = scrollbarLeft + desk.nextAll('.scrollbar-x').width() > desk.width() ? desk.width() - desk.nextAll('.scrollbar-w').width() : scrollbarLeft;
							desk.nextAll('.scrollbar-x').css('left', scrollbarLeft).show();
							desk.scrollLeft(scrollbarLeft / desk.width() * deskW);
						}
					}
				});
			}, 500);
		},
		/*
		**  移动滚动条
		*/
		moveScrollbar : function(){
			/*
			**  手动拖动
			*/
			$('#desk .scrollbar').on('mousedown', function(e){
				var x, y, cx, cy, deskrealw, deskrealh, movew, moveh;
				var scrollbar = $(this), desk = scrollbar.prevAll('.desktop-apps-container');
				deskrealw = parseInt(desk.children('.add').css('left')) + 106;
				deskrealh = parseInt(desk.children('.add').css('top')) + 108;
				movew = desk.width() - scrollbar.width();
				moveh = desk.height() - scrollbar.height();
				if(scrollbar.hasClass('scrollbar-x')){
					x = e.clientX - scrollbar.position().left;
				}else{
					y = e.clientY - scrollbar.position().top;
				}
				$(document).on('mousemove', function(e){
					if(scrollbar.hasClass('scrollbar-x')){
						cx = e.clientX - x < 0 ? 0 : e.clientX - x > movew ? movew : e.clientX - x;
						scrollbar.css('left', cx);
						desk.scrollLeft(cx / desk.width() * deskrealw);
					}else{
						cy = e.clientY - y < 0 ? 0 : e.clientY - y > moveh ? moveh : e.clientY - y;
						scrollbar.css('top', cy);
						desk.scrollTop(cy / desk.height() * deskrealh);
					}
				}).on('mouseup', function(){
					$(this).off('mousemove').off('mouseup');
				});
			});
			/*
			**  鼠标滚动
			*/
			for(var i = 1; i <= 5; i++){
				$('#desk-' + i).on('mousewheel', function(event, delta){
					var desk = $(this).find('.desktop-apps-container');
					if(HROS.CONFIG.appXY == 'x'){
						var deskrealh = parseInt(desk.find('.add').css('top')) + 108, scrollupdown;
						/*
						**  delta == -1   往下
						**  delta == 1    往上
						**  200px 是鼠标滚轮每滚一次的距离
						*/
						if(delta < 0){
							scrollupdown = desk.scrollTop() + 200 > deskrealh - desk.height() ? deskrealh - desk.height() : desk.scrollTop() + 200;
						}else{
							scrollupdown = desk.scrollTop() - 200 < 0 ? 0 : desk.scrollTop() - 200;
						}
						desk.stop(false, true).animate({scrollTop : scrollupdown}, 300);
						desk.nextAll('.scrollbar-y').stop(false, true).animate({
							top : scrollupdown / deskrealh * desk.height()
						}, 300);
					}else{
						var deskrealw = parseInt(desk.find('.add').css('left')) + 106, scrollleftright;
						if(delta < 0){
							scrollleftright = desk.scrollLeft() + 200 > deskrealw - desk.width() ? deskrealw - desk.width() : desk.scrollLeft() + 200;
						}else{
							scrollleftright = desk.scrollLeft() - 200 < 0 ? 0 : desk.scrollLeft() - 200;
						}
						desk.stop(false, true).animate({scrollLeft : scrollleftright}, 300);
						desk.nextAll('.scrollbar-x').stop(false, true).animate({
							left : scrollleftright / deskrealw * desk.width()
						}, 300);
					}
				});
			}
		},
		checkIsMoving : function(){
			var rtn = false;
			if(HROS.VAR.isAppMoving){
				$.dialog({
					title : '温馨提示',
					icon : 'warning',
					content : '数据正在处理中，请稍后。',
					ok : true
				});
				rtn = true;
			}else{
				HROS.VAR.isAppMoving = true;
			}
			return rtn;
		},
		dataWarning : function(){
			$.dialog({
				title : '温馨提示',
				icon : 'warning',
				content : '数据错误，请刷新后重试。',
				ok : true
			});
		},
		dataDockToFolder : function(id, from, to){
			var rtn = false;
			$(HROS.VAR.dock).each(function(i){
				if(this.appid == id){
					$(HROS.VAR.folder).each(function(j){
						if(this.appid == to){
							HROS.VAR.folder[j].apps.push(HROS.VAR.dock[i]);
							HROS.VAR.folder[j].apps = HROS.VAR.folder[j].apps.sortBy(function(n){
								return n.appid;
							}, true);
							HROS.VAR.dock.splice(i, 1);
							rtn = true;
							return false;
						}
					});
					return false;
				}
			});
			if(rtn){
				if($('#desktop').is(':visible')){
					HROS.app.set();
				}else{
					HROS.appmanage.set();
				}
			}else{
				HROS.app.dataWarning();
			}
			return rtn;
		},
		dataDockToDock : function(id, from, to, boa){
			var rtn = false;
			if(HROS.VAR.dock[from] != null){
				if(to == 0){
					if(boa == 'b'){
						HROS.VAR.dock.splice(0, 0, HROS.VAR.dock[from]);
					}else{
						HROS.VAR.dock.splice(1, 0, HROS.VAR.dock[from]);
					}
				}else{
					if(boa == 'b'){
						HROS.VAR.dock.splice(to, 0, HROS.VAR.dock[from]);
					}else{
						HROS.VAR.dock.splice(to + 1, 0, HROS.VAR.dock[from]);
					}
				}
				if(from > to){
					HROS.VAR.dock.splice(from + 1, 1);
				}else{
					HROS.VAR.dock.splice(from, 1);
				}
				rtn = true;
			}
			if(rtn){
				if($('#desktop').is(':visible')){
					HROS.app.set();
				}else{
					HROS.appmanage.set();
				}
			}else{
				HROS.app.dataWarning();
			}
			return rtn;
		},
		dataDockToDesk : function(id, from, to, boa, desk){
			var rtn = false;
			desk = eval('HROS.VAR.desk' + desk);
			if(HROS.VAR.dock[from] != null){
				if(to == 0){
					if(boa == 'b'){
						desk.splice(0, 0, HROS.VAR.dock[from]);
					}else{
						desk.splice(1, 0, HROS.VAR.dock[from]);
					}
				}else{
					if(boa == 'b'){
						desk.splice(to, 0, HROS.VAR.dock[from]);
					}else{
						desk.splice(to + 1, 0, HROS.VAR.dock[from]);
					}
				}
				HROS.VAR.dock.splice(from, 1);
				rtn = true;
			}
			if(rtn){
				if($('#desktop').is(':visible')){
					HROS.app.set();
				}else{
					HROS.appmanage.set();
				}
			}else{
				HROS.app.dataWarning();
			}
			return rtn;
		},
		dataDockToOtherdesk : function(id, from, todesk){
			var rtn = false;
			todesk = eval('HROS.VAR.desk' + todesk);
			if(HROS.VAR.dock[from] != null){
				todesk.push(HROS.VAR.dock[from]);
				HROS.VAR.dock.splice(from, 1);
				rtn = true;
			}
			if(rtn){
				if($('#desktop').is(':visible')){
					HROS.app.set();
				}else{
					HROS.appmanage.set();
				}
			}else{
				HROS.app.dataWarning();
			}
			return rtn;
		},
		dataDockToDelete : function(id, from){
			var rtn = false;
			if(HROS.VAR.dock[from] != null){
				HROS.VAR.dock.splice(from, 1);
				rtn = true;
			}
			if(rtn){
				if($('#desktop').is(':visible')){
					HROS.app.set();
				}else{
					HROS.appmanage.set();
				}
			}else{
				HROS.app.dataWarning();
			}
			return rtn;
		},
		dataDeskToFolder : function(id, from, to, desk){
			var rtn = false;
			desk = eval('HROS.VAR.desk' + desk);
			$(HROS.VAR.folder).each(function(i){
				if(this.appid == to && desk[from] != null){
					HROS.VAR.folder[i].apps.push(desk[from]);
					HROS.VAR.folder[i].apps = HROS.VAR.folder[i].apps.sortBy(function(n){
						return n.appid;
					}, true);
					desk.splice(from, 1);
					rtn = true;
					return false;
				}
			});
			if(rtn){
				if($('#desktop').is(':visible')){
					HROS.app.set();
				}else{
					HROS.appmanage.set();
				}
			}else{
				HROS.app.dataWarning();
			}
			return rtn;
		},
		dataDeskToDock : function(id, from, to, boa, desk){
			var rtn = false;
			desk = eval('HROS.VAR.desk' + desk);
			if(desk[from] != null){
				if(to == 0){
					if(boa == 'b'){
						HROS.VAR.dock.splice(0, 0, desk[from]);
					}else{
						HROS.VAR.dock.splice(1, 0, desk[from]);
					}
				}else{
					if(boa == 'b'){
						HROS.VAR.dock.splice(to, 0, desk[from]);
					}else{
						HROS.VAR.dock.splice(to + 1, 0, desk[from]);
					}
				}
				desk.splice(from, 1);
				if(HROS.VAR.dock.length > 7){
					desk.push(HROS.VAR.dock[7]);
					HROS.VAR.dock.splice(7, 1);
				}
				rtn = true;
			}
			if(rtn){
				if($('#desktop').is(':visible')){
					HROS.app.set();
				}else{
					HROS.appmanage.set();
				}
			}else{
				HROS.app.dataWarning();
			}
			return rtn;
		},
		dataDeskToDesk : function(id, from, to, boa, desk){
			var rtn = false;
			desk = eval('HROS.VAR.desk' + desk);
			if(desk[from] != null){
				if(to == 0){
					if(boa == 'b'){
						desk.splice(0, 0, desk[from]);
					}else{
						desk.splice(1, 0, desk[from]);
					}
				}else{
					if(boa == 'b'){
						desk.splice(to, 0, desk[from]);
					}else{
						desk.splice(to + 1, 0, desk[from]);
					}
				}
				if(from > to){
					desk.splice(from + 1, 1);
				}else{
					desk.splice(from, 1);
				}
				rtn = true;
			}
			if(rtn){
				if($('#desktop').is(':visible')){
					HROS.app.set();
				}else{
					HROS.appmanage.set();
				}
			}else{
				HROS.app.dataWarning();
			}
			return rtn;
		},
		dataDeskToOtherdesk : function(id, from, to, boa, todesk, fromdesk){
			var rtn = false;
			fromdesk = eval('HROS.VAR.desk' + fromdesk);
			todesk = eval('HROS.VAR.desk' + todesk);
			if(fromdesk[from] != null){
				if(to == 0){
					if(boa == 'b'){
						todesk.splice(0, 0, fromdesk[from]);
					}else{
						todesk.splice(1, 0, fromdesk[from]);
					}
				}else{
					if(boa == 'b'){
						todesk.splice(to, 0, fromdesk[from]);
					}else{
						todesk.splice(to + 1, 0, fromdesk[from]);
					}
				}
				fromdesk.splice(from, 1);
				rtn = true;
			}
			if(rtn){
				if($('#desktop').is(':visible')){
					HROS.app.set();
				}else{
					HROS.appmanage.set();
				}
			}else{
				HROS.app.dataWarning();
			}
			return rtn;
		},
		dataFolderToFolder : function(id, from, to, fromFolderId){
			var rtn = false, flags = 0, fromKey, toKey;
			$(HROS.VAR.folder).each(function(i){
				if(this.appid == fromFolderId && HROS.VAR.folder[i].apps[from] != null){
					fromKey = i;
					flags += 1;
				}
				if(this.appid == to){
					toKey = i;
					flags += 1;
				}
			});
			if(flags== 2){
				HROS.VAR.folder[toKey].apps.push(HROS.VAR.folder[fromKey].apps[from]);
				HROS.VAR.folder[toKey].apps = HROS.VAR.folder[toKey].apps.sortBy(function(n){
					return n.appid;
				}, true);
				HROS.VAR.folder[fromKey].apps.splice(from, 1);
				rtn = true;
			}
			if(rtn){
				if($('#desktop').is(':visible')){
					HROS.app.set();
				}else{
					HROS.appmanage.set();
				}
			}else{
				HROS.app.dataWarning();
			}
			return rtn;
		},
		dataFolderToDock : function(id, from, to, fromFolderId, boa, desk){
			var rtn = false;
			desk = eval('HROS.VAR.desk' + desk);
			$(HROS.VAR.folder).each(function(i){
				if(this.appid == fromFolderId && HROS.VAR.folder[i].apps[from] != null){
					if(to == 0){
						if(boa == 'b'){
							HROS.VAR.dock.splice(0, 0, HROS.VAR.folder[i].apps[from]);
						}else{
							HROS.VAR.dock.splice(1, 0, HROS.VAR.folder[i].apps[from]);
						}
					}else{
						if(boa == 'b'){
							HROS.VAR.dock.splice(to, 0, HROS.VAR.folder[i].apps[from]);
						}else{
							HROS.VAR.dock.splice(to + 1, 0, HROS.VAR.folder[i].apps[from]);
						}
					}
					HROS.VAR.folder[i].apps.splice(from, 1);
					if(HROS.VAR.dock.length > 7){
						desk.push(HROS.VAR.dock[7]);
						HROS.VAR.dock.splice(7, 1);
					}
					rtn = true;
					return false;
				}
			});
			if(rtn){
				if($('#desktop').is(':visible')){
					HROS.app.set();
				}else{
					HROS.appmanage.set();
				}
			}else{
				HROS.app.dataWarning();
			}
			return rtn;
		},
		dataFolderToDesk : function(id, from, to, fromFolderId, boa, desk){
			var rtn = false;
			desk = eval('HROS.VAR.desk' + desk);
			$(HROS.VAR.folder).each(function(i){
				if(this.appid == fromFolderId && HROS.VAR.folder[i].apps[from] != null){
					if(to == 0){
						if(boa == 'b'){
							desk.splice(0, 0, HROS.VAR.folder[i].apps[from]);
						}else{
							desk.splice(1, 0, HROS.VAR.folder[i].apps[from]);
						}
					}else{
						if(boa == 'b'){
							desk.splice(to, 0, HROS.VAR.folder[i].apps[from]);
						}else{
							desk.splice(to + 1, 0, HROS.VAR.folder[i].apps[from]);
						}
					}
					HROS.VAR.folder[i].apps.splice(from, 1);
					rtn = true;
					return false;
				}
			});
			if(rtn){
				if($('#desktop').is(':visible')){
					HROS.app.set();
				}else{
					HROS.appmanage.set();
				}
			}else{
				HROS.app.dataWarning();
			}
			return rtn;
		},
		dataFolderToOtherdesk : function(id, from, todesk, fromFolderId){
			var rtn = false;
			todesk = eval('HROS.VAR.desk' + todesk);
			$(HROS.VAR.folder).each(function(i){
				if(this.appid == fromFolderId && HROS.VAR.folder[i].apps[from] != null){
					todesk.push(HROS.VAR.folder[i].apps[from]);
					HROS.VAR.folder[i].apps.splice(from, 1);
					rtn = true;
					return false;
				}
			});
			if(rtn){
				if($('#desktop').is(':visible')){
					HROS.app.set();
				}else{
					HROS.appmanage.set();
				}
			}else{
				HROS.app.dataWarning();
			}
			return rtn;
		},
		dataAllDockToDesk : function(desk){
			desk = eval('HROS.VAR.desk' + desk);
			$(HROS.VAR.dock).each(function(i){
				desk.push(HROS.VAR.dock[i]);
			});
			HROS.VAR.dock.splice(0, HROS.VAR.dock.length);
		},
		dataDeleteByAppid : function(appid){
			$(HROS.VAR.dock).each(function(i){
				if(this.appid == appid){
					HROS.VAR.dock.splice(i, 1);
					return false;
				}
			});
			for(var i = 1; i <= 5; i++){
				var desk = eval('HROS.VAR.desk' + i);
				$(desk).each(function(j){
					if(this.appid == appid){
						desk.splice(j, 1);
						if(this.type == 'folder'){
							$(HROS.VAR.folder).each(function(k){
								if(this.appid == appid){
									HROS.VAR.folder.splice(k, 1);
									return false;
								}
							});
						}
						return false;
					}
				});
			}
			$(HROS.VAR.folder).each(function(i){
				$(this.apps).each(function(j){
					if(this.appid == appid){
						HROS.VAR.folder[i].apps.splice(j, 1);
						return false;
					}
				});
			});
		}
	}
})();/*
**  全局视图
*/
HROS.appmanage = (function(){
	return {
		/*
		**  初始化
		*/
		init : function(){
			$('#appmanage .amg_close').off('click').on('click', function(){
				HROS.appmanage.close();
			});
			$('#amg_folder_container').on('contextmenu', '.appbtn', function(){
				return false;
			});
			HROS.appmanage.move();
			HROS.appmanage.moveScrollbar();
		},
		set : function(){
			$('#desktop').hide();
			$('#appmanage').show();
			$('#amg_folder_container .folderItem').show().addClass('folderItem_turn');
			$('#amg_folder_container .folderInner').height($(window).height() - 80);
			//加载应用码头应用
			var dock_append = '';
			if(HROS.VAR.dock != ''){
				$(HROS.VAR.dock).each(function(i){
					dock_append += appbtnTemp({
						'title' : this.name,
						'type' : this.type,
						'id' : 'd_' + this.appid,
						'appid' : this.appid,
						'realappid' : this.realappid == 0 ? this.appid : this.realappid,
						'imgsrc' : this.icon
					});
				});
			}
			$('#amg_dock_container').html(dock_append);
			//加载桌面应用
			for(var j = 0; j < 5; j++){
				var desk_append = '', desk = eval('HROS.VAR.desk' + (j + 1));
				if(desk != ''){
					$(desk).each(function(i){
						desk_append += appbtnTemp({
							'title' : this.name,
							'type' : this.type,
							'id' : 'd_' + this.appid,
							'appid' : this.appid,
							'realappid' : this.realappid == 0 ? this.appid : this.realappid,
							'imgsrc' : this.icon
						});
					});
				}
				$('#amg_folder_container .folderItem:eq(' + j + ') .folderInner').html(desk_append);
			}
			HROS.appmanage.setPos();
			HROS.appmanage.getScrollbar();
		},
		setPos : function(){
			var manageDockGrid = HROS.grid.getManageDockAppGrid(), manageAppGrid = HROS.grid.getManageAppGrid();
			$('#amg_dock_container li').each(function(i){
				$(this).css({
					'top' : 10,
					'left' : manageDockGrid[i]['startX'] + 6
				});
			});
			for(var j = 0; j < 5; j++){
				$('#amg_folder_container .folderItem:eq(' + j + ') .folderInner li').each(function(i){
					$(this).css({
						'top' : manageAppGrid[i]['startY'] + 5,
						'left' : 0
					});
				});
			}
		},
		move : function(){
			$('#amg_dock_container').on('mousedown', 'li', function(e){
				e.preventDefault();
				e.stopPropagation();
				if(e.button == 0 || e.button == 1){
					var oldobj = $(this);
					var obj = $('<li id="shortcut_shadow">' + oldobj.html() + '</li>');
					var dx = e.clientX;
					var dy = e.clientY;
					var cx = e.clientX;
					var cy = e.clientY;
					var x = dx - oldobj.offset().left;
					var y = dy - oldobj.offset().top;
					var lay = HROS.maskBox.desk();
					//绑定鼠标移动事件
					$(document).on('mousemove', function(e){
						$('body').append(obj);
						lay.show();
						cx = e.clientX <= 0 ? 0 : e.clientX >= $(window).width() ? $(window).width() : e.clientX;
						cy = e.clientY <= 0 ? 0 : e.clientY >= $(window).height() ? $(window).height() : e.clientY;
						if(dx != cx || dy != cy){
							obj.css({
								left : cx - x,
								top : cy - y
							}).show();
						}
					}).on('mouseup', function(){
						$(document).off('mousemove').off('mouseup');
						obj.remove();
						lay.hide();
						//判断是否移动应用，如果没有则判断为click事件
						if(dx == cx && dy == cy){
							HROS.appmanage.close();
							switch(oldobj.attr('type')){
								case 'widget':
								case 'pwidget':
									HROS.widget.create(oldobj.attr('realappid'), oldobj.attr('type'));
									break;
								case 'window':
								case 'pwindow':
								case 'folder':
									HROS.window.create(oldobj.attr('realappid'), oldobj.attr('type'));
									break;
							}
							return false;
						}
						if(cy <= 80){
							var movegrid = HROS.grid.searchManageDockAppGrid(cx);
							if(movegrid != null && movegrid != oldobj.index()){
								var movegrid2 = HROS.grid.searchManageDockAppGrid2(cx);
								var id = oldobj.attr('appid');
								var from = oldobj.index();
								var to = movegrid;
								var boa = movegrid2 % 2 == 0 ? 'b' : 'a';
								if(HROS.base.checkLogin()){
									if(!HROS.app.checkIsMoving()){
										if(HROS.app.dataDockToDock(id, from, to, boa)){
											$.ajax({
												type : 'POST',
												url : ajaxUrl,
												data : 'ac=moveMyApp&movetype=dock-dock&id=' + id + '&from=' + from + '&to=' + to + '&boa=' + boa
											}).done(function(responseText){
												HROS.VAR.isAppMoving = false;
											});
										}
									}
								}else{
									HROS.app.dataDockToDock(id, from, to, boa);
								}
							}
						}else{
							var movedesk = parseInt(cx / ($(window).width() / 5));
							var movegrid = HROS.grid.searchManageAppGrid(cy - 80 + $('#amg_folder_container .folderItem:eq(' + movedesk + ') .folderInner').scrollTop());
							if(movegrid != null){
								var movegrid2 = HROS.grid.searchManageAppGrid2(cy - 80 + $('#amg_folder_container .folderItem:eq(' + movedesk + ') .folderInner').scrollTop());
								var id = oldobj.attr('appid');
								var from = oldobj.index();
								var to = movegrid;
								var boa = movegrid2 % 2 == 0 ? 'b' : 'a';
								var desk = movedesk + 1;
								if(HROS.base.checkLogin()){
									if(!HROS.app.checkIsMoving()){
										if(HROS.app.dataDockToDesk(id, from, to, boa, desk)){
											$.ajax({
												type : 'POST',
												url : ajaxUrl,
												data : 'ac=moveMyApp&movetype=dock-desk&id=' + id + '&from=' + from + '&to=' + to + '&boa=' + boa + '&desk=' + desk
											}).done(function(responseText){
												HROS.VAR.isAppMoving = false;
											});
										}
									}
								}else{
									HROS.app.dataDockToDesk(id, from, to, boa, desk);
								}
							}
						}
					});
				}
				return false;
			});
			$('#amg_folder_container').on('mousedown', 'li.appbtn:not(.add)', function(e){
				e.preventDefault();
				e.stopPropagation();
				if(e.button == 0 || e.button == 1){
					var oldobj = $(this);
					var obj = $('<li id="shortcut_shadow2">' + oldobj.html() + '</li>');
					var dx = e.clientX;
					var dy = e.clientY;
					var cx = e.clientX;
					var cy = e.clientY;
					var x = dx - oldobj.offset().left;
					var y = dy - oldobj.offset().top;
					var lay = HROS.maskBox.desk();
					//绑定鼠标移动事件
					$(document).on('mousemove', function(e){
						$('body').append(obj);
						lay.show();
						cx = e.clientX <= 0 ? 0 : e.clientX >= $(window).width() ? $(window).width() : e.clientX;
						cy = e.clientY <= 0 ? 0 : e.clientY >= $(window).height() ? $(window).height() : e.clientY;
						if(dx != cx || dy != cy){
							obj.css({
								left : cx - x,
								top : cy - y
							}).show();
						}
					}).on('mouseup', function(){
						$(document).off('mousemove').off('mouseup');
						obj.remove();
						lay.hide();
						//判断是否移动应用，如果没有则判断为click事件
						if(dx == cx && dy == cy){
							HROS.appmanage.close();
							switch(oldobj.attr('type')){
								case 'widget':
								case 'pwidget':
									HROS.widget.create(oldobj.attr('realappid'), oldobj.attr('type'));
									break;
								case 'window':
								case 'pwindow':
								case 'folder':
									HROS.window.create(oldobj.attr('realappid'), oldobj.attr('type'));
									break;
							}
							return false;
						}
						if(cy <= 80){
							function next(){
								var movegrid = HROS.grid.searchManageDockAppGrid(cx);
								if(movegrid != null){
									var movegrid2 = HROS.grid.searchManageDockAppGrid2(cx);
									var id = oldobj.attr('appid');
									var from = oldobj.index();
									var to = movegrid;
									var boa = movegrid2 % 2 == 0 ? 'b' : 'a';
									var desk = oldobj.parent().attr('desk');
									if(HROS.base.checkLogin()){
										if(!HROS.app.checkIsMoving()){
											if(HROS.app.dataDeskToDock(id, from, to, boa, desk)){
												$.ajax({
													type : 'POST',
													url : ajaxUrl,
													data : 'ac=moveMyApp&movetype=desk-dock&id=' + id + '&from=' + from + '&to=' + to + '&boa=' + boa + '&desk=' + desk
												}).done(function(responseText){
													HROS.VAR.isAppMoving = false;
												});
											}
										}
									}else{
										HROS.app.dataDeskToDock(id, from, to, boa, desk);
									}
								}
							}
							if(HROS.CONFIG.dockPos == 'none'){
								$.dialog({
									title : '温馨提示',
									icon : 'warning',
									content : '当前应用码头处于停用状态，是否开启？',
									ok : function(){
										HROS.dock.updatePos('top');
										next();
									},
									cancel : true
								});
							}else{
								next();
							}
						}else{
							var movedesk = parseInt(cx / ($(window).width() / 5));
							var movegrid = HROS.grid.searchManageAppGrid(cy - 80 + $('#amg_folder_container .folderItem:eq(' + movedesk + ') .folderInner').scrollTop());
							//判断是在同一桌面移动，还是跨桌面移动
							if(movedesk + 1 == oldobj.parent().attr('desk')){
								if(movegrid != null && movegrid != oldobj.index()){
									var movegrid2 = HROS.grid.searchManageAppGrid2(cy - 80 + $('#amg_folder_container .folderItem:eq(' + movedesk + ') .folderInner').scrollTop());
									var id = oldobj.attr('appid');
									var from = oldobj.index();
									var to = movegrid;
									var boa = movegrid2 % 2 == 0 ? 'b' : 'a';
									var desk = movedesk + 1;
									if(HROS.base.checkLogin()){
										if(!HROS.app.checkIsMoving()){
											if(HROS.app.dataDeskToDesk(id, from, to, boa, desk)){
												$.ajax({
													type : 'POST',
													url : ajaxUrl,
													data : 'ac=moveMyApp&movetype=desk-desk&id=' + id + '&from=' + from + '&to=' + to + '&boa=' + boa + '&desk=' + desk
												}).done(function(responseText){
													HROS.VAR.isAppMoving = false;
												});
											}
										}
									}else{
										HROS.app.dataDeskToDesk(id, from, to, boa, desk);
									}
								}
							}else{
								if(movegrid != null){
									var movegrid2 = HROS.grid.searchManageAppGrid2(cy - 80 + $('#amg_folder_container .folderItem:eq(' + movedesk + ') .folderInner').scrollTop());
									var id = oldobj.attr('appid');
									var from = oldobj.index();
									var to = movegrid;
									var boa = movegrid2 % 2 == 0 ? 'b' : 'a';
									var todesk = movedesk + 1;
									var fromdesk = oldobj.parent().attr('desk');
									if(HROS.base.checkLogin()){
										if(!HROS.app.checkIsMoving()){
											if(HROS.app.dataDeskToOtherdesk(id, from, to, boa, todesk, fromdesk)){
												$.ajax({
													type : 'POST',
													url : ajaxUrl,
													data : 'ac=moveMyApp&movetype=desk-otherdesk&id=' + id + '&from=' + from + '&to=' + to + '&boa=' + boa + '&fromdesk=' + fromdesk + '&todesk=' + todesk
												}).done(function(responseText){
													HROS.VAR.isAppMoving = false;
												});
											}
										}
									}else{
										HROS.app.dataDeskToOtherdesk(id, from, to, boa, todesk, fromdesk);
									}
								}
							}
						}
					});
				}
				return false;
			});
		},
		getScrollbar : function(){
			$('#amg_folder_container .folderInner').height($(window).height() - 80);
			$('#amg_folder_container .folderItem').each(function(){
				var desk = $(this).find('.folderInner'), deskrealh = parseInt(desk.children('.appbtn:last').css('top')) + 41, scrollbar = desk.next('.scrollBar');
				//记录下滚动条更新前的位置，用于更新后的复原
				var scrollbarTop = scrollbar.position().top;
				//先清空所有附加样式
				scrollbar.hide();
				desk.scrollTop(0);
				if(desk.height() / deskrealh < 1){
					scrollbar.height(desk.height() / deskrealh * desk.height());
					scrollbarTop = scrollbarTop + scrollbar.height() > desk.height() ? desk.height() - scrollbar.height() : scrollbarTop;
					scrollbar.css('top', scrollbarTop).show();
					desk.scrollTop(scrollbarTop / desk.height() * deskrealh);
				}
			});
		},
		moveScrollbar : function(){
			/*
			**  手动拖动
			*/
			$('.scrollBar').on('mousedown', function(e){
				var y, cy, deskrealh, moveh;
				var scrollbar = $(this), desk = scrollbar.prev('.folderInner');
				deskrealh = parseInt(desk.children('.appbtn:last').css('top')) + 41;
				moveh = desk.height() - scrollbar.height();
				y = e.clientY - scrollbar.offset().top;
				$(document).on('mousemove', function(e){
					//减80px是因为顶部dock区域的高度为80px，所以计算移动距离需要先减去80px
					cy = e.clientY - y - 80 < 0 ? 0 : e.clientY - y - 80 > moveh ? moveh : e.clientY - y - 80;
					scrollbar.css('top', cy);
					desk.scrollTop(cy / desk.height() * deskrealh);
				}).on('mouseup', function(){
					$(this).off('mousemove').off('mouseup');
				});
			});
			/*
			**  鼠标滚轮
			*/
			$('#amg_folder_container .folderInner').on('mousewheel', function(event, delta){
				var desk = $(this), deskrealh = parseInt(desk.children('.appbtn:last').css('top')) + 41, scrollupdown;
				/*
				**  delta == -1   往下
				**  delta == 1    往上
				*/
				if(delta < 0){
					scrollupdown = desk.scrollTop() + 120 > deskrealh - desk.height() ? deskrealh - desk.height() : desk.scrollTop() + 120;
				}else{
					scrollupdown = desk.scrollTop() - 120 < 0 ? 0 : desk.scrollTop() - 120;
				}
				desk.stop(false, true).animate({
					scrollTop : scrollupdown
				}, 300);
				desk.next('.scrollBar').stop(false, true).animate({
					top : scrollupdown / deskrealh * desk.height()
				}, 300);
			});
		},
		resize : function(){
			HROS.appmanage.getScrollbar();
		},
		close : function(){
			$('#amg_dock_container').html('');
			$('#amg_folder_container .folderInner').html('');
			$('#desktop').show();
			$('#appmanage').hide();
			$('#amg_folder_container .folderItem').removeClass('folderItem_turn');
			HROS.app.set();
			HROS.deskTop.resize();
		}
	}
})();/*
**  一个不属于其他模块的模块
*/
HROS.base = (function(){
	return {
		/*
		**	系统初始化
		*/
		init : function(){
			//配置artDialog全局默认参数
			(function(config){
				config['lock'] = true;
				config['fixed'] = true;
				config['resize'] = false;
				config['background'] = '#000';
				config['opacity'] = 0.5;
			})($.dialog.defaults);
			//更新当前用户ID
			HROS.CONFIG.memberID = $.cookie(cookie_prefix + 'memberID');
			//文件上传
			//HROS.uploadFile.init();
			//阻止弹出浏览器默认右键菜单
			$('body').on('contextmenu', function(){
				return false;
			});
			//版权信息初始化并显示
			HROS.copyright.init();
			//用于判断网页是否缩放
			HROS.zoom.init();
			//桌面(容器)初始化
			HROS.deskTop.init();
			//初始化壁纸
			HROS.wallpaper.init();
			//初始化搜索栏
			HROS.searchbar.init();
			//初始化开始菜单
			HROS.startmenu.init();
			//初始化任务栏
			HROS.taskbar.init();
			/*
			**      当dockPos为top时          当dockPos为left时         当dockPos为right时
			**  -----------------------   -----------------------   -----------------------
			**  | o o o         dock  |   | o | o               |   | o               | o |
			**  -----------------------   | o | o               |   | o               | o |
			**  | o o                 |   | o | o               |   | o               | o |
			**  | o +                 |   |   | o               |   | o               |   |
			**  | o             desk  |   |   | o         desk  |   | o         desk  |   |
			**  | o                   |   |   | +               |   | +               |   |
			**  -----------------------   -----------------------   -----------------------
			**  因为desk区域的尺寸和定位受dock位置的影响，所以加载应用前必须先定位好dock的位置
			*/
			//初始化应用码头
			HROS.dock.init();
			//初始化桌面应用
			HROS.app.init();
			//初始化widget模块
			HROS.widget.init();
			//初始化窗口模块
			HROS.window.init();
			//初始化文件夹预览
			HROS.folderView.init();
			//初始化全局视图
			HROS.appmanage.init();
			//初始化右键菜单
			HROS.popupMenu.init();
			//初始化锁屏
			HROS.lock.init();
			//初始化快捷键
			HROS.hotkey.init();
			//页面加载后运行
			HROS.base.run();
			//绑定ajax全局验证
			$(document).ajaxSuccess(function(event, xhr, settings){
				if($.trim(xhr.responseText) == 'ERROR_NOT_LOGGED_IN'){
					HROS.CONFIG.memberID = 0;
					$.dialog({
						title : '温馨提示',
						icon : 'warning',
						content : '系统检测到您尚未登录，为了更好的操作，是否登录？',
						ok : function(){
							HROS.base.login();
						}
					});
				}
			});
		},
		login : function(){
			$('#lrbox').animate({
				top : 0
			}, 500, function(){
				changeTabindex('login');
			});
		},
		logout : function(){
			$.ajax({
				type : 'POST',
				url : 'login.ajax.php',
				data : 'ac=logout'
			}).done(function(){
				location.reload();
			});
		},
		checkLogin : function(){
			return HROS.CONFIG.memberID != 0 ? true : false;
		},
		setSkin : function(skin, callback){
			function styleOnload(node, callback) {
				// for IE6-9 and Opera
				if(node.attachEvent){
					node.attachEvent('onload', callback);
					// NOTICE:
					// 1. "onload" will be fired in IE6-9 when the file is 404, but in
					// this situation, Opera does nothing, so fallback to timeout.
					// 2. "onerror" doesn't fire in any browsers!
				}
				// polling for Firefox, Chrome, Safari
				else{
					setTimeout(function(){
						poll(node, callback);
					}, 0); // for cache
				}
			}
			function poll(node, callback) {
				if(callback.isCalled){
					return;
				}
				var isLoaded = false;
				//webkit
				if(/webkit/i.test(navigator.userAgent)){
					if (node['sheet']) {
						isLoaded = true;
					}
				}
				// for Firefox
				else if(node['sheet']){
					try{
						if (node['sheet'].cssRules) {
							isLoaded = true;
						}
					}catch(ex){
						// NS_ERROR_DOM_SECURITY_ERR
						if(ex.code === 1000){
							isLoaded = true;
						}
					}
				}
				if(isLoaded){
					// give time to render.
					setTimeout(function() {
						callback();
					}, 1);
				}else{
					setTimeout(function() {
						poll(node, callback);
					}, 1);
				}
			}					
			//将原样式修改id，并载入新样式
			$('#window-skin').attr('id', 'window-skin-ready2remove');
			var css = document.createElement('link');
			css.rel = 'stylesheet';
			css.href = 'img/skins/' + skin + '.css?' + version;
			css.id = 'window-skin';
			document.getElementsByTagName('head')[0].appendChild(css);
			//新样式载入完毕后清空原样式
			//方法为参考seajs源码并改编，文章地址：http://www.blogjava.net/Hafeyang/archive/2011/10/08/360183.html
			styleOnload(css, function(){
				$('#window-skin-ready2remove').remove();
				HROS.CONFIG.skin = skin;
				callback && callback();
			});
		},
		help : function(){
			if(!$.browser.msie || ($.browser.msie && $.browser.version < 9)){
				$('body').append(helpTemp);
				//IE6,7,8基本就告别新手帮助了
				$('#step1').show();
				$('.close').on('click', function(){
					$('#help').remove();
				});
				$('.next').on('click', function(){
					var obj = $(this).parents('.step');
					var step = obj.attr('step');
					obj.hide();
					$('#step' + (parseInt(step) + 1)).show();
				});
				$('.over').on('click', function(){
					$('#help').remove();
				});
			}
		},
		run : function(){
			var url = location.search;
			var request = new Object();
			if(url.indexOf("?") != -1){
				var str = url.substr(1);
				strs = str.split("&");
				for(var i = 0; i < strs.length; i++){
					request[strs[i].split("=")[0]]=unescape(strs[i].split("=")[1]);
				}
			}
			if(typeof(request['run']) != 'undefined' && typeof(request['type']) != 'undefined'){
				if(request['type'] == 'app'){
					HROS.window.create(request['run']);
				}else{
					//判断挂件是否存在cookie中，因为如果存在则自动会启动
					if(!HROS.widget.checkCookie(request['run'], request['type'])){
						HROS.widget.create(request['run']);
					}
				}
			}
		}
	}
})();/*
**  版权信息
*/
HROS.copyright = (function(){
	return {
		/*
		**	初始化
		*/
		init : function(){
			$('#copyright .close').on('click', function(){
				HROS.copyright.hide();
			});
		},
		show : function(){
			var mask = HROS.maskBox.copyright();
			mask.show();
			$('#copyright').show();
		},
		hide : function(){
			var mask = HROS.maskBox.copyright();
			mask.hide();
			$('#copyright').hide();
		}
	}
})();/*
**  桌面
*/
HROS.deskTop = (function(){
	return {
		init : function(){
			//绑定浏览器resize事件
			$(window).on('resize', function(){
				HROS.deskTop.resize();
			});
			$('body').on('click', '#desktop', function(){
				HROS.popupMenu.hide();
				HROS.folderView.hide();
				HROS.searchbar.hide();
				HROS.startmenu.hide();
			}).on('contextmenu', '#desktop', function(e){
				HROS.popupMenu.hide();
				HROS.folderView.hide();
				HROS.searchbar.hide();
				HROS.startmenu.hide();
				var popupmenu = HROS.popupMenu.desk();
				var l = ($(window).width() - e.clientX) < popupmenu.width() ? (e.clientX - popupmenu.width()) : e.clientX;
				var t = ($(window).height() - e.clientY) < popupmenu.height() ? (e.clientY - popupmenu.height()) : e.clientY;
				popupmenu.css({
					left : l,
					top : t
				}).show();
				return false;
			});
		},
		/*
		**  处理浏览器改变大小后的事件
		*/
		resize : function(){
			if($('#desktop').is(':visible')){
				HROS.dock.setPos();
				//更新应用定位
				HROS.app.setPos();
				//更新窗口定位
				HROS.window.setPos();
				//更新文件夹预览定位
				HROS.folderView.setPos();
			}else{
				HROS.appmanage.resize();
			}
			HROS.wallpaper.set(false);
		},
		updateDefaultDesk : function(i){
			if(HROS.base.checkLogin()){
				$.ajax({
					type : 'POST',
					url : ajaxUrl,
					data : 'ac=setDesk&desk=' + i
				});
			}
		}
	}
})();/*
**  应用码头
*/
HROS.dock = (function(){
	return {
		/*
		**	初始化
		*/
		init : function(){
			HROS.dock.setPos();
			//绑定应用码头拖动事件
			HROS.dock.move();
			var dockShowtopFunc;
			$('#dock-container').on('mouseenter', function(){
				dockShowtopFunc = setTimeout(function(){
					$('#dock-container').addClass('showtop');
				}, 300);
			}).on('mouseleave', function(){
				clearInterval(dockShowtopFunc);
				$(this).removeClass('showtop');
			});
			$('body').on('contextmenu', '#dock-container', function(e){
				HROS.popupMenu.hide();
				HROS.folderView.hide();
				HROS.searchbar.hide();
				HROS.startmenu.hide();
				var popupmenu = HROS.popupMenu.dock();
				var l = ($(window).width() - e.clientX) < popupmenu.width() ? (e.clientX - popupmenu.width()) : e.clientX;
				var t = ($(window).height() - e.clientY) < popupmenu.height() ? (e.clientY - popupmenu.height()) : e.clientY;
				popupmenu.css({
					left : l,
					top : t
				}).show();
				return false;
			});
			//绑定应用码头上各个按钮的点击事件
//			$('#dock-bar .dock-tool-setting').on('mousedown', function(){
//				return false;
//			}).on('click',function(){
//				if(HROS.base.checkLogin()){
//					HROS.window.createTemp({
//						appid : 'hoorayos-zmsz',
//						title : '桌面设置',
//						url : 'sysapp/desksetting/index.php',
//						width : 750,
//						height : 450,
//						isflash : false
//					});
//				}else{
//					HROS.base.login();
//				}
//			});
//			$('#dock-bar .dock-tool-style').on('mousedown', function(){
//				return false;
//			}).on('click', function(){
//				if(HROS.base.checkLogin()){
//					HROS.window.createTemp({
//						appid : 'hoorayos-ztsz',
//						title : '主题设置',
//						url : 'sysapp/wallpaper/index.php',
//						width : 580,
//						height : 520,
//						isflash : false
//					});
//				}else{
//					HROS.base.login();
//				}
//			});
			$('#dock-bar .dock-tool-appmanage').on('mousedown', function(){
				return false;
			}).on('click',function(){
				HROS.appmanage.set();
			});
			$('#dock-bar .dock-tool-search').on('mousedown', function(e){
				return false;
			}).on('click',function(e){
				e.stopPropagation();
				HROS.searchbar.get();
			});
			$('#dock-bar .pagination').on('mousedown', function(){
				return false;
			}).on('click',function(){
				HROS.dock.switchDesk($(this).attr('index'));
			});
			$('#dock-bar .dock-tool-start').on('mousedown', function(){
				return false;
			}).on('click', function(){
				HROS.startmenu.show();
				return false;
			});
		},
		setPos : function(){
			HROS.dock.switchDesk(HROS.CONFIG.desk);
			var desktop = $('#desk-' + HROS.CONFIG.desk), desktops = $('#desk .desktop-container');
			var desk_w = desktop.css('width', '100%').width(), desk_h = desktop.css('height', '100%').height();
			//清除dock位置样式
			$('#dock-container').removeClass('dock-top dock-left dock-right');
			$('#dock-bar').removeClass('top-bar left-bar right-bar').hide();
			if(HROS.CONFIG.dockPos == 'top'){
				$('#dock-bar').addClass('top-bar').children('#dock-container').addClass('dock-top');
				desktops.css({
					'width' : desk_w,
					'height' : desk_h - $('#task-bar').height() - $('#dock-bar').height(),
					'left' : desk_w,
					'top' : $('#dock-bar').height()
				});
				desktop.css({
					'left' : 0
				});
				$('#dock-bar').show();
			}else if(HROS.CONFIG.dockPos == 'left'){
				$('#dock-bar').addClass('left-bar').children('#dock-container').addClass('dock-left');
				desktops.css({
					'width' : desk_w - $('#dock-bar').width(),
					'height' : desk_h - $('#task-bar').height(),
					'left' : desk_w + $('#dock-bar').width(),
					'top' : 0
				});
				desktop.css({
					'left' : $('#dock-bar').width()
				});
				$('#dock-bar').show();
			}else if(HROS.CONFIG.dockPos == 'right'){
				$('#dock-bar').addClass('right-bar').children('#dock-container').addClass('dock-right');
				desktops.css({
					'width' : desk_w - $('#dock-bar').width(),
					'height' : desk_h - $('#task-bar').height(),
					'left' : desk_w,
					'top' : 0
				});
				desktop.css({
					'left' : 0
				});
				$('#dock-bar').show();
			}else if(HROS.CONFIG.dockPos == 'none'){
				desktops.css({
					'width' : desk_w,
					'height' : desk_h - $('#task-bar').height(),
					'left' : desk_w,
					'top' : 0
				});
				desktop.css({
					'left' : 0
				});
			}
			HROS.taskbar.resize();
			HROS.folderView.setPos();
		},
		updatePos : function(pos){
			if(pos != HROS.CONFIG.dockPos && typeof(pos) != 'undefined'){
				HROS.CONFIG.dockPos = pos;
				if(pos == 'none'){
					HROS.app.dataAllDockToDesk(HROS.CONFIG.desk);
				}
				//更新码头位置
				HROS.dock.setPos();
				//更新桌面应用
				HROS.app.set();
				if(HROS.base.checkLogin()){
					$.ajax({
						type : 'POST',
						url : ajaxUrl,
						data : 'ac=setDockPos&dock=' + pos + '&desk=' + HROS.CONFIG.desk
					});
				}
			}
		},
		move : function(){
			$('#dock-container').on('mousedown',function(e){
				if(e.button == 0 || e.button == 1){
					var lay = HROS.maskBox.dock(), location;
					$(document).on('mousemove', function(e){
						lay.show();
						if(e.clientY < lay.height() * 0.2){
							location = 'top';		
						}else if(e.clientX < lay.width() * 0.5){
							location = 'left';
						}else{				
							location = 'right';
						}
						$('.dock_drap_effect').removeClass('hover');
						$('.dock_drap_effect_' + location).addClass('hover');
					}).on('mouseup', function(){
						$(document).off('mousemove').off('mouseup');
						lay.hide();
						HROS.dock.updatePos(location);
					});
				}
			});
		},
		/*
		**  切换桌面
		*/
		switchDesk : function(deskNumber){
			//验证传入的桌面号是否为1-5的正整数
			var r = /^\+?[1-5]*$/;
			deskNumber = r.test(deskNumber) ? deskNumber : 1;
			var pagination = $('#dock-bar .dock-pagination'), currindex = HROS.CONFIG.desk, switchindex = deskNumber,
			currleft = $('#desk-' + currindex).offset().left, switchleft = $('#desk-' + switchindex).offset().left;
			if(currindex != switchindex){
				if(!$('#desk-' + switchindex).hasClass('animated') && !$('#desk-' + currindex).hasClass('animated')){
					$('#desk-' + currindex).addClass('animated').animate({
						left : switchleft
					}, 500, 'easeInOutCirc', function(){
						$(this).removeClass('animated');
					});
					$('#desk-'+switchindex).addClass('animated').animate({
						left : currleft
					}, 500, 'easeInOutCirc', function(){
						$(this).removeClass('animated');
						pagination.removeClass('current-pagination-' + currindex).addClass('current-pagination-' + switchindex);
						HROS.CONFIG.desk = switchindex;
					});
				}
			}else{
				pagination.removeClass('current-pagination-' + currindex).addClass('current-pagination-' + switchindex);
			}
		}
	}
})();HROS.folderView = (function(){
	return {
		init : function(){
			$('body').on('click', '.quick_view_container', function(){
				HROS.popupMenu.hide();
			}).on('click', '.quick_view_container_open', function(){
				HROS.window.create($(this).parents('.quick_view_container').attr('appid'), 'folder');
				HROS.folderView.hide();
			}).on('click', '.appbtn', function(){
				HROS.popupMenu.hide();
				HROS.folderView.hide();
				HROS.searchbar.hide();
				HROS.startmenu.hide();
			});
			HROS.folderView.moveScrollbar();
		},
		get : function(obj){
			setTimeout(function(){
				//判断文件夹窗口是否已打开
				var iswindowopen = false;
				$('body .quick_view_container').each(function(){
					if($(this).attr('realappid') == obj.attr('realappid')){
						iswindowopen = true;
						return false;
					}
				});
				if(iswindowopen){
					var folderViewId = '#qv_' + obj.attr('appid');
				}else{
					HROS.folderView.hide();
				}
				var sc = '';
				$(HROS.VAR.folder).each(function(){
					if(this.appid == obj.attr('appid')){
						sc = this.apps;
						return false;
					}
				});
				var folderViewHtml = '', height = 0;
				if(sc != ''){
					$(sc).each(function(){
						if(this.type == 'window' || this.type == 'widget' || this.type == 'pwindow' || this.type == 'pwidget'){
							folderViewHtml += appbtnTemp({
								'title' : this.name,
								'type' : this.type,
								'id' : 'd_' + this.appid,
								'appid' : this.appid,
								'realappid' : this.realappid,
								'imgsrc' : this.icon
							});
						}
					});
					if(sc.length % 4 == 0){
						height += Math.floor(sc.length / 4) * 60;
					}else{
						height += (Math.floor(sc.length / 4) + 1) * 60;
					}
				}else{
					folderViewHtml = '文件夹为空';
					height += 30;
				}
				//判断是桌面上的文件夹，还是应用码头上的文件夹
				var left, top;
				if(obj.parent('div').hasClass('dock-applist')){
					left = parseInt(obj.attr('left')) + obj.width();
					top = parseInt(obj.attr('top'));
				}else{
					left = parseInt(obj.attr('left')) + obj.width();
					top = parseInt(obj.attr('top')) - 20;
				}
				//判断预览面板是否有超出屏幕
				var isScrollbar = false;
				if(height + top + 44 > $(window).height()){
					var outH = height + top + 44 - $(window).height();
					if(outH <= top){
						top -= outH;
					}else{
						height -= outH - top;
						top = 0;
						isScrollbar = true;
					}
				}
				if(left + 330 > $(window).width()){
					left -= (330 + obj.width());
					//预览居左
					if(iswindowopen){
						$(folderViewId + ' .quick_view_container_list_in').html('').append(folderViewHtml);
						$(folderViewId).stop(true, false).animate({'left' : left, 'top' : top}, 500);
						$(folderViewId + ' .perfect_nine_m_l_t').stop(true, false).animate({'top' : 0, 'height' : Math.ceil((height + 24) / 2)}, 200);
						$(folderViewId + ' .perfect_nine_m_l_m').stop(true, false).animate({'top' : Math.ceil((height + 24) / 2)}, 200).hide();
						$(folderViewId + ' .perfect_nine_m_l_b').stop(true, false).animate({'top' : Math.ceil((height + 24) / 2), 'height' : Math.ceil((height + 24) / 2) + 20}, 200);
						$(folderViewId + ' .perfect_nine_m_r_t').stop(true, false).animate({'top' : 0, 'height' : obj.offset().top - top}, 200);
						$(folderViewId + ' .perfect_nine_m_r_m').stop(true, false).animate({'top' : parseInt(obj.attr('top')) - top}, 200).show();
						$(folderViewId + ' .perfect_nine_m_r_b').stop(true, false).animate({'top' : parseInt(obj.attr('top')) - top + 20, 'height' : height + 24 - (parseInt(obj.attr('top')) - top) - 20 + 20}, 200);
						$(folderViewId + ' .quick_view_container_list_in').stop(true, false).animate({'height' : height}, 200);
					}else{
						$('body').append(folderViewTemp({
							'id' : 'qv_' + obj.attr('appid'),
							'appid' : obj.attr('appid'),
							'realappid' : obj.attr('realappid'),
							'apps' : folderViewHtml,
							'top' : top,
							'left' : left,
							'height' : height,
							'mlt' : Math.ceil((height + 24) / 2),
							'mlm' : false,
							'mlb' : Math.ceil((height + 24) / 2),
							'mrt' : obj.offset().top - top,
							'mrm' : true,
							'mrb' : height + 24 - (obj.offset().top - top) - 20
						}));
					}
				}else{
					//预览居右
					if(iswindowopen){
						$(folderViewId + ' .quick_view_container_list_in').html('').append(folderViewHtml);
						$(folderViewId).stop(true, false).animate({'left' : left, 'top' : top}, 500);
						$(folderViewId + ' .perfect_nine_m_l_t').stop(true, false).animate({'top' : 0, 'height' : parseInt(obj.attr('top')) - top}, 200);
						$(folderViewId + ' .perfect_nine_m_l_m').stop(true, false).animate({'top' : parseInt(obj.attr('top')) - top}, 200).show();
						$(folderViewId + ' .perfect_nine_m_l_b').stop(true, false).animate({'top' : parseInt(obj.attr('top')) - top + 20, 'height' : height + 24 - (parseInt(obj.attr('top')) - top) - 20}, 200);
						$(folderViewId + ' .perfect_nine_m_r_t').stop(true, false).animate({'top' : 0, 'height' : Math.ceil((height + 24) / 2)}, 200);
						$(folderViewId + ' .perfect_nine_m_r_m').stop(true, false).animate({'top' : Math.ceil((height + 24) / 2)}, 200).hide();
						$(folderViewId + ' .perfect_nine_m_r_b').stop(true, false).animate({'top' : Math.ceil((height + 24) / 2), 'height' : Math.ceil((height + 24) / 2)}, 200);
						$(folderViewId + ' .quick_view_container_list_in').stop(true, false).animate({'height' : height}, 200);
					}else{
						$('body').append(folderViewTemp({
							'id' : 'qv_' + obj.attr('appid'),
							'appid' : obj.attr('appid'),
							'realappid' : obj.attr('realappid'),
							'apps' : folderViewHtml,
							'top' : top,
							'left' : left,
							'height' : height,
							'mlt' : obj.offset().top - top,
							'mlm' : true,
							'mlb' : height + 24 - (obj.offset().top - top) - 20,
							'mrt' : Math.ceil((height + 24) / 2),
							'mrm' : false,
							'mrb' : Math.ceil((height + 24) / 2)
						}));
					}
				}
				var view = '#quick_view_container_list_in_' + obj.attr('appid');
				var scrollbar = '#quick_view_container_list_' + obj.attr('appid') + ' .scrollBar';
				$('#quick_view_container_list_' + obj.attr('appid') + ' .scrollBar_bgc').hide();
				$(scrollbar).hide().height(0);
				if(isScrollbar){
					$('#quick_view_container_list_' + obj.attr('appid') + ' .scrollBar_bgc').show();
					$(scrollbar).show().height($(view).height() / (Math.ceil($(view).children().length / 4) * 60) * $(view).height());
				}
			}, 0);
		},
		setPos : function(){
			$('body .quick_view_container').each(function(){
				HROS.folderView.get($('#d_' + $(this).attr('appid')));
			});
		},
		moveScrollbar : function(){
			/*
			**  手动拖动
			*/
			$('body').on('mousedown', '.quick_view_container .quick_view_container_list .scrollBar', function(e){
				var scrollbar = $(this), container = scrollbar.prev('.quick_view_container_list_in');
				var offsetTop = container.offset().top;
				var y, cy, containerrealh, moveh;
				containerrealh = Math.ceil(container.children().length / 4) * 60;
				moveh = container.height() - scrollbar.height();
				y = e.clientY - scrollbar.offset().top;
				$(document).on('mousemove', function(e){
					cy = e.clientY - y - offsetTop < 0 ? 0 : e.clientY - y - offsetTop > moveh ? moveh : e.clientY - y - offsetTop;
					scrollbar.css('top', cy);
					container.scrollTop(cy / container.height() * containerrealh);
				}).on('mouseup', function(){
					$(this).off('mousemove').off('mouseup');
				});
			});
			/*
			**  鼠标滚轮
			*/
			$('body').on('mousewheel', '.quick_view_container_list_in', function(event, delta){
				var desk = $(this), deskrealh = Math.ceil($(this).children().length / 4) * 60, scrollupdown;
				/*
				**  delta == -1   往下
				**  delta == 1    往上
				*/
				if(delta < 0){
					scrollupdown = desk.scrollTop() + 40 > deskrealh - desk.height() ? deskrealh - desk.height() : desk.scrollTop() + 40;
				}else{
					scrollupdown = desk.scrollTop() - 40 < 0 ? 0 : desk.scrollTop() - 40;
				}
				desk.stop(false, true).animate({
					scrollTop : scrollupdown
				}, 300);
				$(this).next('.scrollBar').stop(false, true).animate({
					top : scrollupdown / deskrealh * desk.height()
				}, 300);
			});
		},
		hide : function(){
			$('.quick_view_container').remove();
		}
	}
})();/*
**  应用布局格子
**  这篇文章里有简单说明格子的作用
**  http://hooray.cnblogs.com/p/3480087.html
*/
HROS.grid = (function(){
	return {
		getAppGrid : function(){
			var width = $('#desk-' + HROS.CONFIG.desk).width() - HROS.CONFIG.appButtonLeft;
			var height = $('#desk-' + HROS.CONFIG.desk).height() - HROS.CONFIG.appButtonTop;
			var top = HROS.CONFIG.appButtonTop;
			var left = HROS.CONFIG.appButtonLeft;
			var appGrid = [];
			var offsetTop = HROS.CONFIG.appSize == 's' ? 80 : 100;
			var offsetLeft = HROS.CONFIG.appSize == 's' ? 100 : 120;
			for(var i = 0; i < 10000; i++){
				appGrid.push({
					startY : top,
					endY : top + offsetTop,
					startX : left,
					endX : left + offsetLeft
				});
				if(HROS.CONFIG.appXY == 'x'){
					left += offsetLeft;
					if(left + offsetLeft > width){
						top += offsetTop;
						left = HROS.CONFIG.appButtonLeft;
					}
				}else{
					top += offsetTop;
					if(top + offsetTop > height){
						top = HROS.CONFIG.appButtonTop;
						left += offsetLeft;
					}
				}
			}
			return appGrid;
		},
		searchAppGrid : function(x, y){
			var grid = HROS.grid.getAppGrid();
			var flag = null;
			for(var i = 0; i < grid.length; i++){
				if(x >= grid[i].startX && x <= grid[i].endX && y >= grid[i].startY && y <= grid[i].endY){
					flag = i;
					break;
				}
			}
			return flag;
		},
		searchAppGrid2 : function(x, y){
			var grid = HROS.grid.getAppGrid();
			var grid2 = [];
			for(var i = 0; i < grid.length; i++){
				var height = grid[i].endY - grid[i].startY;
				var width = grid[i].endX - grid[i].startX;
				var halfH = height / 2;
				var halfW = width / 2;
				if(HROS.CONFIG.appXY == 'x'){
					grid2.push({
						startY : grid[i].startY,
						endY : grid[i].startY + height,
						startX : grid[i].startX,
						endX : grid[i].startX + halfW
					},{
						startY : grid[i].startY,
						endY : grid[i].startY + height,
						startX : grid[i].startX + halfW,
						endX : grid[i].endX
					});
				}else{
					grid2.push({
						startY : grid[i].startY,
						endY : grid[i].startY + halfH,
						startX : grid[i].startX,
						endX : grid[i].startX + width
					},{
						startY : grid[i].startY + halfH,
						endY : grid[i].endY,
						startX : grid[i].startX,
						endX : grid[i].startX + width
					});
				}
			}
			var flag = null;
			for(var i = 0; i < grid2.length; i++){
				if(x >= grid2[i].startX && x <= grid2[i].endX && y >= grid2[i].startY && y <= grid2[i].endY){
					flag = i;
					break;
				}
			}
			return flag;
		},
		getDockAppGrid : function(){
			var height = $('#dock-bar .dock-applist').height();
			var dockAppGrid = [];
			var top = 0;
			var left = 0;
			var offsetTop = 68;
			var offsetLeft = 68;
			for(var i = 0; i < 7; i++){
				dockAppGrid.push({
					startY : top,
					endY : top + offsetTop,
					startX : left,
					endX : left + offsetLeft
				});
				top += offsetTop;
				if(top + offsetTop > height){
					top = 0;
					left += offsetLeft;
				}
			}
			return dockAppGrid;
		},
		searchDockAppGrid : function(x, y){
			var grid = HROS.grid.getDockAppGrid();
			var flag = null;
			for(var i = 0; i < grid.length; i++){
				if(x >= grid[i].startX && x <= grid[i].endX && y >= grid[i].startY && y <= grid[i].endY){
					flag = i;
					break;
				}
			}
			return flag;
		},
		searchDockAppGrid2 : function(x, y){
			var grid = HROS.grid.getDockAppGrid();
			var grid2 = [];
			for(var i = 0; i < grid.length; i++){
				var height = grid[i].endY - grid[i].startY;
				var width = grid[i].endX - grid[i].startX;
				var halfH = height / 2;
				var halfW = width / 2;
				if(HROS.CONFIG.dockPos == 'top'){
					grid2.push({
						startY : grid[i].startY,
						endY : grid[i].startY + height,
						startX : grid[i].startX,
						endX : grid[i].startX + halfW
					},{
						startY : grid[i].startY,
						endY : grid[i].startY + height,
						startX : grid[i].startX + halfW,
						endX : grid[i].endX
					});
				}else{
					grid2.push({
						startY : grid[i].startY,
						endY : grid[i].startY + halfH,
						startX : grid[i].startX,
						endX : grid[i].startX + width
					},{
						startY : grid[i].startY + halfH,
						endY : grid[i].endY,
						startX : grid[i].startX,
						endX : grid[i].startX + width
					});
				}
			}
			var flag = null;
			for(var i = 0; i < grid2.length; i++){
				if(x >= grid2[i].startX && x <= grid2[i].endX && y >= grid2[i].startY && y <= grid2[i].endY){
					flag = i;
					break;
				}
			}
			return flag;
		},
		getFolderGrid : function(){
			var folderGrid = [];
			$('.quick_view_container, .folder-window:visible').each(function(){
				folderGrid.push({
					zIndex : $(this).css('z-index'),
					id : $(this).attr('appid'),
					startY : $(this).offset().top,
					endY : $(this).offset().top + $(this).height(),
					startX :  $(this).offset().left,
					endX :  $(this).offset().left +  $(this).width()
				});
			});
			folderGrid.sort(function(x, y){
				return y['zIndex'] - x['zIndex'];
			});
			return folderGrid;
		},
		searchFolderGrid : function(x, y){
			var folderGrid = HROS.grid.getFolderGrid();
			var flag = null;
			for(var i = 0; i < folderGrid.length; i++){
				if(x >= folderGrid[i].startX && x <= folderGrid[i].endX && y >= folderGrid[i].startY && y <= folderGrid[i].endY){
					flag = folderGrid[i]['id'];
					break;
				}
			}
			return flag;
		},
		getManageDockAppGrid : function(){
			var manageDockAppGrid = [];
			var left = 20;
			for(var i = 0; i < 100; i++){
				manageDockAppGrid.push({
					startX : left,
					endX : left + 70
				});
				left += 70;
			}
			return manageDockAppGrid;
		},
		searchManageDockAppGrid : function(x){
			var grid = HROS.grid.getManageDockAppGrid();
			var flag = null;
			for(var i = 0; i < grid.length; i++){
				if(x >= grid[i].startX && x <= grid[i].endX){
					flag = i;
					break;
				}
			}
			return flag;
		},
		searchManageDockAppGrid2 : function(x){
			var grid = HROS.grid.getManageDockAppGrid();
			var grid2 = [];
			for(var i = 0; i < grid.length; i++){
				var width = grid[i].endX - grid[i].startX;
				var halfW = width / 2;
				grid2.push({
					startX : grid[i].startX,
					endX : grid[i].startX + halfW
				},{
					startX : grid[i].startX + halfW,
					endX : grid[i].endX
				});
			}
			var flag = null;
			for(var i = 0; i < grid2.length; i++){
				if(x >= grid2[i].startX && x <= grid2[i].endX){
					flag = i;
					break;
				}
			}
			return flag;
		},
		getManageAppGrid : function(){
			var manageAppGrid = [];
			var top = 0;
			for(var i = 0; i < 10000; i++){
				manageAppGrid.push({
					startY : top,
					endY : top + 40
				});
				top += 40;
			}
			return manageAppGrid;
		},
		searchManageAppGrid : function(y){
			var grid = HROS.grid.getManageAppGrid();
			var flag = null;
			for(var i = 0; i < grid.length; i++){
				if(y >= grid[i].startY && y <= grid[i].endY){
					flag = i;
					break;
				}
			}
			return flag;
		},
		searchManageAppGrid2 : function(y){
			var grid = HROS.grid.getManageAppGrid();
			var grid2 = [];
			for(var i = 0; i < grid.length; i++){
				var height = grid[i].endY - grid[i].startY;
				var width = grid[i].endX - grid[i].startX;
				var halfH = height / 2;
				grid2.push({
					startY : grid[i].startY,
					endY : grid[i].startY + halfH
				},{
					startY : grid[i].startY + halfH,
					endY : grid[i].endY
				});
			}
			var flag = null;
			for(var i = 0; i < grid2.length; i++){
				if(y >= grid2[i].startY && y <= grid2[i].endY){
					flag = i;
					break;
				}
			}
			return flag;
		}
	}
})();HROS.hotkey = (function(){
	return {
		init : function(){
			Mousetrap.bind(['backspace'], function(){
				return false;
			});
			//显示桌面（最小化所有窗口）
			Mousetrap.bind(['alt+d'], function(){
				HROS.window.hideAll();
				return false;
			});
			//显示全局视图
			Mousetrap.bind(['ctrl+up', 'command+up'], function(){
				HROS.appmanage.set();
				return false;
			});
			//调出查询栏
			Mousetrap.bind(['ctrl+f', 'command+f'], function(){
				HROS.searchbar.get();
				return false;
			});
			Mousetrap.bind(['ctrl+1', 'command+1'], function(){
				HROS.dock.switchDesk(1);
				return false;
			});
			Mousetrap.bind(['ctrl+2', 'command+2'], function(){
				HROS.dock.switchDesk(2);
				return false;
			});
			Mousetrap.bind(['ctrl+3', 'command+3'], function(){
				HROS.dock.switchDesk(3);
				return false;
			});
			Mousetrap.bind(['ctrl+4', 'command+4'], function(){
				HROS.dock.switchDesk(4);
				return false;
			});
			Mousetrap.bind(['ctrl+5', 'command+5'], function(){
				HROS.dock.switchDesk(5);
				return false;
			});
			Mousetrap.bind(['ctrl+left', 'command+left'], function(){
				if(parseInt(HROS.CONFIG.desk) - 1 < 1){
					HROS.dock.switchDesk(5);
				}else{
					HROS.dock.switchDesk(parseInt(HROS.CONFIG.desk) - 1);
				}
				return false;
			});
			Mousetrap.bind(['ctrl+right', 'command+right'], function(){
				if(parseInt(HROS.CONFIG.desk) + 1 > 5){
					HROS.dock.switchDesk(1);
				}else{
					HROS.dock.switchDesk(parseInt(HROS.CONFIG.desk) + 1);
				}
				return false;
			});
			//锁定
			Mousetrap.bind(['ctrl+l', 'command+l'], function(){
				HROS.lock.show();
				return false;
			});
		}
	}
})();HROS.lock = (function(){
	return {
		init : function(){
			Mousetrap.bind(['space'], function(){
				$('#lock').click();
				return false;
			});
			$('body').on('click', '#lock', function(){
				if($('#lock-info').is(':visible')){
					$('#lock .title').animate({
						top : '10%'
					}, 500);
					$('#lock .tip').animate({
						top : '80%'
					}, 500);
					$('#lock-info').fadeOut();
					Mousetrap.bind(['space'], function(){
						$('#lock').click();
						return false;
					});
					Mousetrap.unbind('esc');
				}else{
					$('#lock .title').animate({
						top : '-200px'
					}, 500);
					$('#lock .tip').animate({
						top : '100%'
					}, 500);
					$('#lock-info').fadeIn();
					$('#lockpassword').val('').focus();
					$('#lock-info .text-tip').text('');
					Mousetrap.bind(['esc'], function(){
						$('#lock').click();
						return false;
					});
					Mousetrap.unbind('space');
				}
			});
			$('body').on('click', '#lock-info', function(){
				return false;
			});
			$('body').on('click', '#lockbtn', function(){
				if($('#lockpassword').val() != ''){
					$.ajax({
						type : 'POST',
						url : 'login.ajax.php',
						data : 'ac=unlock&password=' + $('#lockpassword').val(),
					}).done(function(responseText){
						if(responseText == 'ERROR_LOCKPASSWORD'){
							$('#lockpassword').val('').focus();
							$('#lock-info .text-tip').text('解锁密码错误');
						}else{
							HROS.lock.hide();
						}
					});
				}else{
					$('#lock-info .text-tip').text('请输入解锁密码');
				}
			});
			$('body').on('keydown', '#lockpassword', function(e){
				if(e.keyCode == '13'){
					$('#lockbtn').click();
				}
			});
		},
		show : function(){
			if($('#lock').length == 0){
				if(!HROS.base.checkLogin()){
					$.dialog({
						title : '温馨提示',
						icon : 'warning',
						content : '锁定功能需要登录后才能使用，为了更好的操作，是否登录？',
						ok : function(){
							HROS.base.login();
						}
					});
				}else{
					var lock = function(){
						$.ajax({
							type : 'POST',
							url : 'login.ajax.php',
							data : 'ac=logout'
						});
						$('#desktop').hide();
						var userinfo = $.parseJSON($.cookie(cookie_prefix + 'userinfo'));
						$('body').append(lockTemp({
							'avatar' : userinfo.avatar,
							'username' : userinfo.username
						}));
						//时间，日期，星期信息的显示
						var getTimeDateWeek = function(){
							var time = new Date();
							$('#lock .time').text((time.getHours() < 10 ? '0' + time.getHours() : time.getHours()) + ':' + (time.getMinutes() < 10 ? '0' + time.getMinutes() : time.getMinutes()));
							var date = time.getFullYear() + '/' + (time.getMonth() + 1) + '/' + time.getDate() + '，星期';
							switch(time.getDay()){
								case '1' : date += '一'; break;
								case '1' : date += '二'; break;
								case '1' : date += '三'; break;
								case '1' : date += '四'; break;
								case '1' : date += '五'; break;
								case '1' : date += '六'; break;
								default : date += '日';
							}
							$('#lock .week').text(date);
						};
						getTimeDateWeek();
						lockFunc = setInterval(function(){
							//检查是否有恶意修改源程序绕过锁屏界面
							var iswarning = false;
							if($('#desktop').is(':visible')){
								iswarning = true;
							}
							if($('#lock').length == 0){
								iswarning = true;
							}
							if($('#lock').is(':hidden')){
								iswarning = true;
							}
							//如果有则重新载入锁屏
							if(iswarning){
								clearInterval(lockFunc);
								$('#lock').remove();
								HROS.lock.show();
							}
							getTimeDateWeek();
						}, 1000);
					};
					if($.cookie(cookie_prefix + 'isfirstlock' + HROS.CONFIG.memberID) == null){
						$.cookie(cookie_prefix + 'isfirstlock' + HROS.CONFIG.memberID, 1);
						$.dialog({
							title : '温馨提示',
							icon : 'warning',
							content : '解锁密码默认为登录密码，是否要先进行修改？',
							button : [
								{
									name : '继续锁定',
									callback : function(){
										lock();
									},
									focus : true
								},
								{
									name : '修改解锁密码',
									callback : function(){
										HROS.window.createTemp({
											appid : 'zhsz',
											title : '账号设置',
											url : 'sysapp/account/security.php',
											width : 550,
											height : 580
										});
									}
								}
							]
						});
					}else{
						lock();
					}
				}
			}
		},
		hide : function(){
			clearInterval(lockFunc);
			$('#lock').remove();
			$('#desktop').show();
		}
	}
})();/*
**  透明遮罩层
**  当拖动应用、窗口等一切可拖动的对象时，会加载一个遮罩层
**  避免拖动时触发或选中一些不必要的操作，安全第一
*/
HROS.maskBox = (function(){
	return {
		desk : function(){
			if(!TEMP.maskBoxDesk){
				TEMP.maskBoxDesk = $('<div id="maskbox"></div>');
				$('body').append(TEMP.maskBoxDesk);
			}
			return TEMP.maskBoxDesk;
		},
		dock : function(){
			if(!TEMP.maskBoxDock){
				TEMP.maskBoxDock = $('<div id="maskbox-dockdrap"><div id="docktop" class="dock_drap_effect dock_drap_effect_top"></div><div id="dockleft" class="dock_drap_effect dock_drap_effect_left"></div><div id="dockright" class="dock_drap_effect dock_drap_effect_right"></div><div id="dockmask" class="dock_drap_mask"><div class="dock_drop_region_top"><div class="text">拖放至顶部</div></div><div class="dock_drop_region_left"><div class="text">拖放至左侧</div></div><div class="dock_drop_region_right"><div class="text">拖放至右侧</div></div></div></div>');
				$('body').append(TEMP.maskBoxDock);
			}
			return TEMP.maskBoxDock;
		},
		copyright : function(){
			if(!TEMP.maskBoxCopyright){
				TEMP.maskBoxCopyright = $('<div id="maskbox-copyright"></div>');
				$('body').append(TEMP.maskBoxCopyright);
			}
			return TEMP.maskBoxCopyright;
		}
	}
})();/*
**  右键菜单
*/
HROS.popupMenu = (function(){
	return {
		init : function(){
			$('.popup-menu').on('contextmenu', function(){
				return false;
			});
			//动态控制多级菜单的显示位置
			$('body').on('mouseenter', '.popup-menu li', function(){
				if($(this).children('.popup-menu').length == 1){
					$(this).children('a').addClass('focus');
					$(this).children('.popup-menu').show();
					if($(this).parents('.popup-menu').offset().left + $(this).parents('.popup-menu').width() * 2 + 10 < $(window).width()){
						$(this).children('.popup-menu').css({
							left : $(this).parents('.popup-menu').width() - 5,
							top : 0
						});
					}else{
						$(this).children('.popup-menu').css({
							left : -1 * $(this).parents('.popup-menu').width(),
							top : 0
						});
					}
					if($(this).children('.popup-menu').offset().top + $(this).children('.popup-menu').height() + 10 > $(window).height()){
						$(this).children('.popup-menu').css({
							top : $(window).height() - $(this).children('.popup-menu').height() - $(this).children('.popup-menu').offset().top - 10
						});
					}
				}
			}).on('mouseleave', '.popup-menu li', function(){
				$(this).children('a').removeClass('focus');
				$(this).children('.popup-menu').hide();
			});
		},
		/*
		**  应用右键
		*/
		app : function(obj){
			HROS.window.show2under();
			if(!TEMP.popupMenuApp){
				TEMP.popupMenuApp = $(
					'<div class="popup-menu app-menu"><ul>'+
						'<li style="border-bottom:1px solid #F0F0F0"><a menu="open" href="javascript:;">打开</a></li>'+
						/*'<li>'+
							'<a menu="move" href="javascript:;">移动到<b class="arrow">»</b></a>'+
							'<div class="popup-menu"><ul>'+
								'<li><a menu="moveto" desk="1" href="javascript:;">桌面1</a></li>'+
								'<li><a menu="moveto" desk="2" href="javascript:;">桌面2</a></li>'+
								'<li><a menu="moveto" desk="3" href="javascript:;">桌面3</a></li>'+
								'<li><a menu="moveto" desk="4" href="javascript:;">桌面4</a></li>'+
								'<li><a menu="moveto" desk="5" href="javascript:;">桌面5</a></li>'+
							'</ul></div>'+
						'</li>'+*/
						'<li><a menu="edit" href="javascript:;"><b class="edit"></b>编辑</a></li>'+
						'<li><a menu="del" href="javascript:;"><b class="uninstall"></b>卸载</a></li>'+
					'</ul></div>'
				);
				$('body').append(TEMP.popupMenuApp);
			}
			$('.app-menu a[menu="moveto"]').removeClass('disabled');
			if(obj.parent().hasClass('desktop-apps-container')){
				$('.app-menu a[menu="moveto"]').each(function(){
					if($(this).attr('desk') == HROS.CONFIG.desk){
						$(this).addClass('disabled');
					}
				});
			}
			//绑定事件
			$('.app-menu a[menu="moveto"]').off('click').on('click', function(){
				var id = obj.attr('appid'),
				from = obj.index(),
				to = 99999,
				todesk = $(this).attr('desk'),
				fromdesk = HROS.CONFIG.desk,
				fromfolderid = obj.parents('.folder-window').attr('appid') || obj.parents('.quick_view_container').attr('appid');
				if(HROS.base.checkLogin()){
					if(!HROS.app.checkIsMoving()){
						var rtn = false;
						if(obj.parent().hasClass('dock-applist')){
							if(HROS.app.dataDockToOtherdesk(id, from, todesk)){
								$.ajax({
									type : 'POST',
									url : ajaxUrl,
									data : 'ac=moveMyApp&movetype=dock-otherdesk&id=' + id + '&from=' + from + '&todesk=' + todesk
								}).done(function(responseText){
									HROS.VAR.isAppMoving = false;
								});
							}
						}else if(obj.parent().hasClass('desktop-apps-container')){
							if(HROS.app.dataDeskToOtherdesk(id, from, to, 'a', todesk, fromdesk)){
								$.ajax({
									type : 'POST',
									url : ajaxUrl,
									data : 'ac=moveMyApp&movetype=desk-otherdesk&id=' + id + '&from=' + from + '&to=' + to + '&todesk=' + todesk + '&fromdesk=' + fromdesk
								}).done(function(responseText){
									HROS.VAR.isAppMoving = false;
								});
							}
						}else{
							if(HROS.app.dataFolderToOtherdesk(id, from, todesk, fromfolderid)){
								$.ajax({
									type : 'POST',
									url : ajaxUrl,
									data : 'ac=moveMyApp&movetype=folder-otherdesk&id=' + id + '&from=' + from + '&todesk=' + todesk + '&fromfolderid=' + fromfolderid
								}).done(function(responseText){
									HROS.VAR.isAppMoving = false;
								});
							}
						}
					}
				}else{
					if(obj.parent().hasClass('dock-applist')){
						HROS.app.dataDockToOtherdesk(id, from, todesk);
					}else if(obj.parent().hasClass('desktop-apps-container')){
						HROS.app.dataDeskToOtherdesk(id, from, todesk, fromdesk);
					}else{
						HROS.app.dataFolderToOtherdesk(id, from, todesk, fromfolderid);
					}
				}
				$('.popup-menu').hide();
			});
			$('.app-menu a[menu="open"]').off('click').on('click', function(){
				HROS.window.create(obj.attr('realappid'), obj.attr('type'));
				$('.popup-menu').hide();
			});
			$('.app-menu a[menu="edit"]').off('click').on('click', function(){
				if(HROS.base.checkLogin()){
					$.dialog.open('sysapp/dialog/app.php?id=' + obj.attr('appid'), {
						id : 'editdialog',
						title : '编辑应用“' + obj.children('span').text() + '”',
						width : 600,
						height : 350
					});
				}else{
					HROS.base.login();
				}
				$('.popup-menu').hide();
			});
			$('.app-menu a[menu="del"]').off('click').on('click', function(){
				HROS.app.dataDeleteByAppid(obj.attr('appid'));
				HROS.widget.removeCookie(obj.attr('realappid'), obj.attr('type'));
				HROS.app.remove(obj.attr('appid'), function(){
					obj.find('img, span').show().animate({
						opacity : 'toggle',
						width : 0,
						height : 0
					}, 500, function(){
						obj.remove();
						HROS.deskTop.resize();
					});
				});
				$('.popup-menu').hide();
			});
			return TEMP.popupMenuApp;
		},
		papp : function(obj){
			HROS.window.show2under();
			if(!TEMP.popupMenuPapp){
				TEMP.popupMenuPapp = $(
					'<div class="popup-menu papp-menu"><ul>'+
						'<li style="border-bottom:1px solid #F0F0F0"><a menu="open" href="javascript:;">打开</a></li>'+
						/*'<li>'+
							'<a menu="move" href="javascript:;">移动到<b class="arrow">»</b></a>'+
							'<div class="popup-menu"><ul>'+
								'<li><a menu="moveto" desk="1" href="javascript:;">桌面1</a></li>'+
								'<li><a menu="moveto" desk="2" href="javascript:;">桌面2</a></li>'+
								'<li><a menu="moveto" desk="3" href="javascript:;">桌面3</a></li>'+
								'<li><a menu="moveto" desk="4" href="javascript:;">桌面4</a></li>'+
								'<li><a menu="moveto" desk="5" href="javascript:;">桌面5</a></li>'+
							'</ul></div>'+
						'</li>'+*/
						'<li><a menu="edit" href="javascript:;"><b class="edit"></b>编辑</a></li>'+
						'<li><a menu="del" href="javascript:;"><b class="del"></b>删除</a></li>'+
					'</ul></div>'
				);
				$('body').append(TEMP.popupMenuPapp);
			}
			$('.papp-menu a[menu="moveto"]').removeClass('disabled');
			if(obj.parent().hasClass('desktop-apps-container')){
				$('.papp-menu a[menu="moveto"]').each(function(){
					if($(this).attr('desk') == HROS.CONFIG.desk){
						$(this).addClass('disabled');
					}
				});
			}
			//绑定事件
			$('.papp-menu a[menu="moveto"]').off('click').on('click', function(){
				var id = obj.attr('appid'),
				from = obj.index(),
				to = -1,
				todesk = $(this).attr('desk'),
				fromdesk = HROS.CONFIG.desk,
				fromfolderid = obj.parents('.folder-window').attr('appid') || obj.parents('.quick_view_container').attr('appid');
				if(HROS.base.checkLogin()){
					var rtn = false;
					if(obj.parent().hasClass('dock-applist')){
						if(HROS.app.dataDockToOtherdesk(id, from, todesk)){
							$.ajax({
								type : 'POST',
								url : ajaxUrl,
								data : 'ac=moveMyApp&movetype=dock-otherdesk&id=' + id + '&from=' + from + '&todesk=' + todesk
							}).done(function(responseText){
								HROS.VAR.isAppMoving = false;
							});
						}
					}else if(obj.parent().hasClass('desktop-container')){
						if(HROS.app.dataDeskToOtherdesk(id, from, to, todesk, fromdesk)){
							$.ajax({
								type : 'POST',
								url : ajaxUrl,
								data : 'ac=moveMyApp&movetype=desk-otherdesk&id=' + id + '&from=' + from + '&to=' + to + '&todesk=' + todesk + '&fromdesk=' + fromdesk
							}).done(function(responseText){
								HROS.VAR.isAppMoving = false;
							});
						}
					}else{
						if(HROS.app.dataFolderToOtherdesk(id, from, todesk, fromfolderid)){
							$.ajax({
								type : 'POST',
								url : ajaxUrl,
								data : 'ac=moveMyApp&movetype=folder-otherdesk&id=' + id + '&from=' + from + '&todesk=' + todesk + '&fromfolderid=' + fromfolderid
							}).done(function(responseText){
								HROS.VAR.isAppMoving = false;
							});
						}
					}
				}else{
					if(obj.parent().hasClass('dock-applist')){
						HROS.app.dataDockToOtherdesk(id, from, todesk);
					}else if(obj.parent().hasClass('desktop-apps-container')){
						HROS.app.dataDeskToOtherdesk(id, from, todesk, fromdesk);
					}else{
						HROS.app.dataFolderToOtherdesk(id, from, todesk, fromfolderid);
					}
				}
				$('.popup-menu').hide();
			});
			$('.papp-menu a[menu="open"]').off('click').on('click', function(){
				switch(obj.attr('type')){
					case 'papp':
						HROS.window.create(obj.attr('realappid'), obj.attr('type'));
						break;
					case 'pwidget':
						HROS.widget.create(obj.attr('realappid'), obj.attr('type'));
						break;
				}
				$('.popup-menu').hide();
			});
			$('.papp-menu a[menu="edit"]').off('click').on('click', function(){
				if(HROS.base.checkLogin()){
					$.dialog.open('sysapp/dialog/papp.php?id=' + obj.attr('appid'), {
						id : 'editdialog',
						title : '编辑私人应用“' + obj.children('span').text() + '”',
						width : 600,
						height : 450
					});
				}else{
					HROS.base.login();
				}
				$('.popup-menu').hide();
			});
			$('.papp-menu a[menu="del"]').off('click').on('click', function(){
				HROS.app.dataDeleteByAppid(obj.attr('appid'));
				HROS.widget.removeCookie(obj.attr('realappid'), obj.attr('type'));
				HROS.app.remove(obj.attr('appid'), function(){
					obj.find('img, span').show().animate({
						opacity : 'toggle',
						width : 0,
						height : 0
					}, 500, function(){
						obj.remove();
						HROS.deskTop.resize();
					});
				});
				$('.popup-menu').hide();
			});
			return TEMP.popupMenuPapp;
		},
		/*
		**  文件夹右键
		*/
		folder : function(obj){
			HROS.window.show2under();
			if(!TEMP.popupMenuFolder){
				TEMP.popupMenuFolder = $(
					'<div class="popup-menu folder-menu"><ul>'+
						'<li><a menu="view" href="javascript:;">预览</a></li>'+
						'<li style="border-bottom:1px solid #F0F0F0"><a menu="open" href="javascript:;">打开</a></li>'+
						/*'<li>'+
							'<a menu="move" href="javascript:;">移动到<b class="arrow">»</b></a>'+
							'<div class="popup-menu"><ul>'+
								'<li><a menu="moveto" desk="1" href="javascript:;">桌面1</a></li>'+
								'<li><a menu="moveto" desk="2" href="javascript:;">桌面2</a></li>'+
								'<li><a menu="moveto" desk="3" href="javascript:;">桌面3</a></li>'+
								'<li><a menu="moveto" desk="4" href="javascript:;">桌面4</a></li>'+
								'<li><a menu="moveto" desk="5" href="javascript:;">桌面5</a></li>'+
							'</ul></div>'+
						'</li>'+*/
						'<li><a menu="rename" href="javascript:;"><b class="edit"></b>重命名</a></li>'+
						'<li><a menu="del" href="javascript:;"><b class="del"></b>删除</a></li>'+
					'</ul></div>'
				);
				$('body').append(TEMP.popupMenuFolder);
			}
			$('.folder-menu a[menu="moveto"]').removeClass('disabled');
			if(obj.parent().hasClass('desktop-apps-container')){
				$('.folder-menu a[menu="moveto"]').each(function(){
					if($(this).attr('desk') == HROS.CONFIG.desk){
						$(this).addClass('disabled');
					}
				});
			}
			//绑定事件
			$('.folder-menu a[menu="view"]').off('click').on('click', function(){
				HROS.folderView.get(obj);
				$('.popup-menu').hide();
			});
			$('.folder-menu a[menu="open"]').off('click').on('click', function(){
				HROS.window.create(obj.attr('realappid'), obj.attr('type'));
				$('.popup-menu').hide();
			});
			$('.folder-menu a[menu="moveto"]').off('click').on('click', function(){
				var id = obj.attr('appid'),
				from = obj.index(),
				to = -1,
				todesk = $(this).attr('desk'),
				fromdesk = HROS.CONFIG.desk,
				fromfolderid = obj.parents('.folder-window').attr('appid') || obj.parents('.quick_view_container').attr('appid');
				if(HROS.base.checkLogin()){
					var rtn = false;
					if(obj.parent().hasClass('dock-applist')){
						if(HROS.app.dataDockToOtherdesk(id, from, todesk)){
							$.ajax({
								type : 'POST',
								url : ajaxUrl,
								data : 'ac=moveMyApp&movetype=dock-otherdesk&id=' + id + '&from=' + from + '&todesk=' + todesk
							}).done(function(responseText){
								HROS.VAR.isAppMoving = false;
							});
						}
					}else if(obj.parent().hasClass('desktop-apps-container')){
						if(HROS.app.dataDeskToOtherdesk(id, from, to, todesk, fromdesk)){
							$.ajax({
								type : 'POST',
								url : ajaxUrl,
								data : 'ac=moveMyApp&movetype=desk-otherdesk&id=' + id + '&from=' + from + '&to=' + to + '&todesk=' + todesk + '&fromdesk=' + fromdesk
							}).done(function(responseText){
								HROS.VAR.isAppMoving = false;
							});
						}
					}else{
						if(HROS.app.dataFolderToOtherdesk(id, from, todesk, fromfolderid)){
							$.ajax({
								type : 'POST',
								url : ajaxUrl,
								data : 'ac=moveMyApp&movetype=folder-otherdesk&id=' + id + '&from=' + from + '&todesk=' + todesk + '&fromfolderid=' + fromfolderid
							}).done(function(responseText){
								HROS.VAR.isAppMoving = false;
							});
						}
					}
				}else{
					if(obj.parent().hasClass('dock-applist')){
						HROS.app.dataDockToOtherdesk(id, from, todesk);
					}else if(obj.parent().hasClass('desktop-apps-container')){
						HROS.app.dataDeskToOtherdesk(id, from, todesk, fromdesk);
					}else{
						HROS.app.dataFolderToOtherdesk(id, from, todesk, fromfolderid);
					}
				}
				$('.popup-menu').hide();
			});
			$('.folder-menu a[menu="rename"]').off('click').on('click', function(){
				if(HROS.base.checkLogin()){
					$.dialog({
						id : 'addfolder',
						title : '重命名“' + obj.find('span').text() + '”文件夹',
						padding : 0,
						content : editFolderDialogTemp({
							'name' : obj.find('span').text(),
							'src' : obj.find('img').attr('src')
						}),
						ok : function(){
							if($('#folderName').val() != ''){
								$.ajax({
									type : 'POST',
									url : ajaxUrl,
									data : 'ac=updateFolder&name=' + $('#folderName').val() + '&icon=' + $('.folderSelector img').attr('src') + '&id=' + obj.attr('appid')
								}).done(function(responseText){
									HROS.app.get();
								});
							}else{
								$('.folderNameError').show();
								return false;
							}
						},
						cancel : true
					});
					$('.folderSelector').off('click').on('click', function(){
						$('.fcDropdown').show();
					});
					$('.fcDropdown_item').off('click').on('click', function(){
						$('.folderSelector img').attr('src', $(this).children('img').attr('src')).attr('idx', $(this).children('img').attr('idx'));
						$('.fcDropdown').hide();
					});
				}else{
					HROS.base.login();
				}
				$('.popup-menu').hide();
			});
			$('.folder-menu a[menu="del"]').off('click').on('click', function(){
				$.dialog({
					id : 'delfolder',
					title : '删除“' + obj.find('span').text() + '”文件夹',
					content : '删除文件夹的同时会删除文件夹内所有应用',
					icon : 'warning',
					ok : function(){
						HROS.app.remove(obj.attr('appid'), function(){
							HROS.app.dataDeleteByAppid(obj.attr('appid'));
							obj.find('img, span').show().animate({
								opacity : 'toggle',
								width : 0,
								height : 0
							}, 500, function(){
								obj.remove();
								HROS.deskTop.resize();
							});
						});
					},
					cancel : true
				});
				$('.popup-menu').hide();
			});
			return TEMP.popupMenuFolder;
		},
		/*
		**  应用码头右键
		*/
		dock : function(){
			HROS.window.show2under();
			if(!TEMP.popupMenuDock){
				TEMP.popupMenuDock = $(
					'<div class="popup-menu dock-menu"><ul>'+
						'<li><a menu="dockPos" pos="top" href="javascript:;"><b class="hook"></b>向上停靠</a></li>'+
						'<li><a menu="dockPos" pos="left" href="javascript:;"><b class="hook"></b>向左停靠</a></li>'+
						'<li><a menu="dockPos" pos="right" href="javascript:;"><b class="hook"></b>向右停靠</a></li>'+
//						'<li><a menu="dockPos" pos="none" href="javascript:;">隐藏</a></li>'+
					'</ul></div>'
				);
				$('body').append(TEMP.popupMenuDock);
				//绑定事件
				$('.dock-menu a[menu="dockPos"]').on('click', function(){
					if($(this).attr('pos') == 'none'){
						$.dialog({
							title : '温馨提示',
							icon : 'warning',
							content : '<p>如果应用码头存在应用，隐藏后会将应用转移到当前桌面。</p><p>若需要再次开启，可在桌面空白处点击右键，进入「 桌面设置 」里开启。</p>',
							ok : function(){
								HROS.dock.updatePos('none');
							},
							cancel : true
						});
					}else{
						HROS.dock.updatePos($(this).attr('pos'));
					}
					$('.popup-menu').hide();
				});
			}
			$('.dock-menu a[menu="dockPos"]').each(function(){
				$(this).children('.hook').hide();
				if($(this).attr('pos') == HROS.CONFIG.dockPos){
					$(this).children('.hook').show();
				}
				$('.popup-menu').hide();
			});
			return TEMP.popupMenuDock;
		},
		/*
		**  任务栏右键
		*/
		task : function(obj){
			HROS.window.show2under();
			if(!TEMP.popupMenuTask){
				TEMP.popupMenuTask = $(
					'<div class="popup-menu task-menu"><ul>'+
						'<li><a menu="max" href="javascript:;">最大化</a></li>'+
						'<li style="border-bottom:1px solid #F0F0F0"><a menu="hide" href="javascript:;">最小化</a></li>'+
						'<li><a menu="close" href="javascript:;">关闭</a></li>'+
					'</ul></div>'
				);
				$('body').append(TEMP.popupMenuTask);
			}
			//绑定事件
			$('.task-menu a[menu="max"]').off('click').on('click', function(){
				HROS.window.max(obj.attr('appid'), obj.attr('type'));
				$('.popup-menu').hide();
			});
			$('.task-menu a[menu="hide"]').off('click').on('click', function(){
				HROS.window.hide(obj.attr('appid'), obj.attr('type'));
				$('.popup-menu').hide();
			});
			$('.task-menu a[menu="close"]').off('click').on('click', function(){
				HROS.window.close(obj.attr('appid'), obj.attr('type'));
				$('.popup-menu').hide();
			});
			return TEMP.popupMenuTask;
		},
		/*
		**  桌面右键
		*/
		desk : function(){
			HROS.window.show2under();
			if(!TEMP.popupMenuDesk){
				TEMP.popupMenuDesk = $(
					'<div class="popup-menu desk-menu"><ul>'+
						'<li><a menu="hideall" href="javascript:;">显示桌面</a></li>'+
						'<li style="border-bottom:1px solid #F0F0F0"><a menu="closeall" href="javascript:;">关闭所有窗口</a></li>'+
						'<li>'+
							'<a href="javascript:;">新建<b class="arrow">»</b></a>'+
							'<div class="popup-menu"><ul>'+
								'<li><a menu="addfolder" href="javascript:;"><b class="folder"></b>新建文件夹</a></li>'+
								'<li><a menu="addpapp" href="javascript:;"><b class="customapp"></b>新建私人应用</a></li>'+
							'</ul></div>'+
						'</li>'+
						'<!--li style="border-bottom:1px solid #F0F0F0"><b class="upload"></b><a menu="uploadfile" href="javascript:;">上传文件</a></li-->'+
//						'<li><a menu="themes" href="javascript:;"><b class="themes"></b>主题设置</a></li>'+
//						'<li><a menu="setting" href="javascript:;"><b class="setting"></b>桌面设置</a></li>'+
						'<li style="border-bottom:1px solid #F0F0F0">'+
							'<a href="javascript:;">图标设置<b class="arrow">»</b></a>'+
							'<div class="popup-menu"><ul>'+
								'<li>'+
									'<a href="javascript:;">排列<b class="arrow">»</b></a>'+
									'<div class="popup-menu"><ul>'+
										'<li><a menu="orderby" orderby="x" href="javascript:;"><b class="hook"></b>横向排列</a></li>'+
										'<li><a menu="orderby" orderby="y" href="javascript:;"><b class="hook"></b>纵向排列</a></li>'+
									'</ul></div>'+
								'</li>'+
								'<li>'+
									'<a href="javascript:;">尺寸<b class="arrow">»</b></a>'+
									'<div class="popup-menu"><ul>'+
										'<li><a menu="size" size="s" href="javascript:;"><b class="hook"></b>小图标</a></li>'+
										'<li><a menu="size" size="m" href="javascript:;"><b class="hook"></b>大图标</a></li>'+
									'</ul></div>'+
								'</li>'+
							'</ul></div>'+
						'</li>'+
						'<li><a menu="lock" href="javascript:;">锁定</a></li>'+
						'<li><a menu="logout" href="javascript:;">注销</a></li>'+
					'</ul></div>'
				);
				$('body').append(TEMP.popupMenuDesk);
				if(!HROS.base.checkLogin()){
					$('body .desk-menu li a[menu="logout"]').parent().remove();
				}
				//绑定事件
				$('.desk-menu a[menu="orderby"]').on('click', function(){
					HROS.app.updateXY($(this).attr('orderby'));
					$('.popup-menu').hide();
				});
				$('.desk-menu a[menu="size"]').on('click', function(){
					HROS.app.updateSize($(this).attr('size'));
					$('.popup-menu').hide();
				});
				$('.desk-menu a[menu="hideall"]').on('click', function(){
					HROS.window.hideAll();
					$('.popup-menu').hide();
				});
				$('.desk-menu a[menu="closeall"]').on('click', function(){
					HROS.window.closeAll();
					$('.popup-menu').hide();
				});
				$('.desk-menu a[menu="addfolder"]').on('click', function(){
					if(HROS.base.checkLogin()){
						$.dialog({
							id : 'addfolder',
							title : '新建文件夹',
							padding : 0,
							content : editFolderDialogTemp({
								'name' : '新建文件夹',
								'src' : 'img/ui/folder_default.png'
							}),
							ok : function(){
								if($('#folderName').val() != ''){
									$.ajax({
										type : 'POST',
										url : ajaxUrl,
										data : 'ac=addFolder&name=' + $('#folderName').val() + '&icon=' + $('.folderSelector img').attr('src') + '&desk=' + HROS.CONFIG.desk
									}).done(function(responseText){
										HROS.app.get();
									});
								}else{
									$('.folderNameError').show();
									return false;
								}
							},
							cancel : true
						});
						$('.folderSelector').on('click', function(){
							$('#addfolder .fcDropdown').show();
							return false;
						});
						$(document).click(function(){
							$('#addfolder .fcDropdown').hide();
						});
						$('.fcDropdown_item').on('click', function(){
							$('.folderSelector img').attr('src', $(this).children('img').attr('src')).attr('idx', $(this).children('img').attr('idx'));
							$('#addfolder .fcDropdown').hide();
						});
					}else{
						HROS.base.login();
					}
					$('.popup-menu').hide();
				});
				$('.desk-menu a[menu="addpapp"]').on('click', function(){
					if(HROS.base.checkLogin()){
						$.dialog.open('sysapp/dialog/papp.php?desk=' + HROS.CONFIG.desk, {
							id : 'editdialog',
							title : '新建私人应用',
							width : 600,
							height : 450
						});
					}else{
						HROS.base.login();
					}
					$('.popup-menu').hide();
				});
				$('.desk-menu a[menu="uploadfile"]').on('click', function(){
					HROS.uploadFile.getDialog();
					$('.popup-menu').hide();
				});
//				$('.desk-menu a[menu="themes"]').on('click', function(){
//					if(HROS.base.checkLogin()){
//						HROS.window.createTemp({
//							appid : 'hoorayos-ztsz',
//							title : '主题设置',
//							url : 'sysapp/wallpaper/index.php',
//							width : 580,
//							height : 520,
//							isflash : false
//						});
//					}else{
//						HROS.base.login();
//					}
//					$('.popup-menu').hide();
//				});
//				$('.desk-menu a[menu="setting"]').on('click', function(){
//					if(HROS.base.checkLogin()){
//						HROS.window.createTemp({
//							appid : 'hoorayos-zmsz',
//							title : '桌面设置',
//							url : 'sysapp/desksetting/index.php',
//							width : 750,
//							height : 450,
//							isflash : false
//						});
//					}else{
//						HROS.base.login();
//					}
//					$('.popup-menu').hide();
//				});
				$('.desk-menu a[menu="lock"]').on('click', function(){
					HROS.lock.show();
					$('.popup-menu').hide();
				});
				$('.desk-menu a[menu="logout"]').on('click', function(){
					HROS.base.logout();
					$('.popup-menu').hide();
				});
			}
			$('.desk-menu a[menu="orderby"]').each(function(){
				$(this).children('.hook').hide();
				if($(this).attr('orderby') == HROS.CONFIG.appXY){
					$(this).children('.hook').show();
				}
				$('.popup-menu').hide();
			});
			$('.desk-menu a[menu="size"]').each(function(){
				$(this).children('.hook').hide();
				if($(this).attr('size') == HROS.CONFIG.appSize){
					$(this).children('.hook').show();
				}
				$('.popup-menu').hide();
			});
			return TEMP.popupMenuDesk;
		},
		hide : function(){
			$('.popup-menu').hide();
		}
	}
})();/*
**  搜索栏
*/
HROS.searchbar = (function(){
	return {
		/*
		**  初始化
		*/
		init : function(){
			$('#pageletSearchInput').on('click', function(){
				return false;
			});
			$('#search-suggest .resultBox').on('click', 'li', function(){
				switch($(this).attr('type')){
					case 'window':
						HROS.window.create($(this).attr('realappid'), $(this).attr('type'));
						break;
					case 'widget':
						HROS.widget.create($(this).attr('realappid'), $(this).attr('type'));
						break;
				}
			});
			$('#search-suggest .openAppMarket a, #pageletSearchButton').on('click', function(){
				HROS.searchbar.openAppMarket($('#pageletSearchInput').val());
			});
			$('#pageletSearchInput').on('keydown', function(e){
				if(e.keyCode == '13'){
					if($('#search-suggest .resultBox .resultList a.selected').length == 0 && $('#search-suggest > .resultList a.selected').length == 0){
						HROS.searchbar.openAppMarket($(this).val());
					}else{
						$('#search-suggest .resultList a.selected').click();
					}
				}
			});
		},
		get : function(){
			var oldSearchVal = '';
			searchFunc = setInterval(function(){
				var searchVal = $('#pageletSearchInput').val();
				if(searchVal != ''){
					$('#search-suggest').show();
					if(searchVal != oldSearchVal){
						oldSearchVal = searchVal;
						HROS.searchbar.getSuggest(searchVal);
					}
					$('#search-bar').removeClass('above').addClass('above');
				}else{
					$('#search-suggest').hide();
					$('#search-bar').removeClass('above');
				}
			}, 1000);
			HROS.searchbar.set();
			Mousetrap.bind(['up'], function(){
				if($('#search-suggest .resultBox .resultList a.selected').length == 0 && $('#search-suggest > .resultList a.selected').length == 0){
					$('#search-suggest > .resultList:last a').addClass('selected');
				}else{
					if($('#search-suggest .resultBox .resultList:first a').hasClass('selected')){
						$('#search-suggest .resultList a').removeClass('selected');
					}else{
						if($('#search-suggest > .resultList a.selected').length != 0){
							var i = $('#search-suggest > .resultList a.selected').parent('.resultList').index();
							$('#search-suggest .resultList a').removeClass('selected');
							if(i > 1){
								$('#search-suggest > .resultList:eq(' + (i - 1) + ') a').addClass('selected');
							}else{
								$('#search-suggest .resultBox .resultList:last a').addClass('selected');
							}
						}else{
							var i = $('#search-suggest .resultBox .resultList a.selected').parent('.resultList').index();
							$('#search-suggest .resultList a').removeClass('selected');
							if(i > 0){
								$('#search-suggest .resultBox .resultList:eq(' + (i - 1) + ') a').addClass('selected');
							}
						}
					}
				}
			});
			Mousetrap.bind(['down'], function(){
				if($('#search-suggest .resultBox .resultList a.selected').length == 0 && $('#search-suggest > .resultList a.selected').length == 0){
					if($('#search-suggest .resultBox .resultList').length == 0){
						$('#search-suggest > .resultList:first a').addClass('selected');
					}else{
						$('#search-suggest .resultBox .resultList:first a').addClass('selected');
					}
				}else{
					if($('#search-suggest > .resultList:last a').hasClass('selected')){
						$('#search-suggest .resultList a').removeClass('selected');
					}else{
						if($('#search-suggest .resultBox .resultList a.selected').length != 0){
							var i = $('#search-suggest .resultBox .resultList a.selected').parent('.resultList').index();
							$('#search-suggest .resultList a').removeClass('selected');
							if(i < $('#search-suggest .resultBox .resultList').length - 1){
								$('#search-suggest .resultBox .resultList:eq(' + (i + 1) + ') a').addClass('selected');
							}else{
								$('#search-suggest > .resultList:first a').addClass('selected');
							}
						}else{
							var i = $('#search-suggest > .resultList a.selected').parent('.resultList').index();
							$('#search-suggest .resultList a').removeClass('selected');
							if(i < $('#search-suggest > .resultList').length - 1){
								$('#search-suggest > .resultList:eq(' + (i + 1) + ') a').addClass('selected');
							}else{
								$('#search-suggest .resultBox .resultList:first a').addClass('selected');
							}
						}
					}
				}
			});
		},
		set : function(){
			$('#search-bar').show();
			$('#search-suggest .resultList a').removeClass('selected');
			$('#pageletSearchInput').focus();
		},
		getSuggest : function(val){
			var apps = [];
			$(HROS.VAR.dock).each(function(){
				if(jQuery.inArray(this.type, ['window', 'widget']) >= 0){
					apps.push(this);
				}
			});
			for(var i = 1; i <= 5; i++){
				var desk = eval('HROS.VAR.desk' + i);
				$(desk).each(function(){
					if(jQuery.inArray(this.type, ['window', 'widget']) >= 0){
						apps.push(this);
					}
				});
			}
			$(HROS.VAR.folder).each(function(){
				$(this.apps).each(function(){
					if(jQuery.inArray(this.type, ['window', 'widget']) >= 0){
						apps.push(this);
					}
				});
			});
			var suggest = '';
			$(apps).each(function(){
				if(this.name.indexOf(val) >= 0){
					suggest += suggestTemp({
						'name' : this.name,
						'appid' : this.appid,
						'realappid' : this.realappid,
						'type' : this.type
					});
				}
			});
			$('#search-suggest .resultBox').html(suggest);
			if(suggest == ''){
				$('#search-suggest .resultBox').hide();
			}else{
				$('#search-suggest .resultBox').show();
			}
			HROS.searchbar.set();
		},
		openAppMarket : function(searchkey){
			if(searchkey != ''){
				HROS.window.createTemp({
					appid : 'hoorayos-yysc',
					title : '应用市场',
					url : 'sysapp/appmarket/index.php?searchkey=' + searchkey,
					width : 800,
					height : 484,
					isflash : false,
					refresh : true
				});
			}
			HROS.searchbar.hide();
		},
		hide : function(){
			if(typeof(searchFunc) != 'undefined'){
				clearInterval(searchFunc);
			}
			$('#search-bar').removeClass('above');
			$('#search-bar, #search-suggest').hide();
			$('#pageletSearchInput').val('');
			$('#search-suggest .resultBox').html('');
			Mousetrap.unbind(['up', 'down']);
		}
	}
})();/*
**  开始菜单
*/
HROS.startmenu = (function(){
	return {
		/*
		**	初始化
		*/
		init : function(){
			HROS.startmenu.getAvatar();
			$('#startmenu-container').on('mousedown', function(e){
				e.preventDefault();
			});
			$('#startmenu-container .startmenu-nick a, #startmenu-container .startmenu-avatar img').on('click', function(){
				//HROS.startmenu.openAccount();
			});
			$('#startmenu-container .startmenu-exit a').on('click', function(){
				HROS.base.logout();
			});
			$('#startmenu-container .startmenu-lock').on('click', function(){
				HROS.lock.show();
			});
//			$('#startmenu-container .startmenu-feedback').on('click', function(){
//				HROS.window.createTemp({
//					appid : 'hoorayos-feedback',
//					title : '反馈',
//					url : 'http://hoorayos.com/feedback.html',
//					width : 700,
//					height : 500,
//					isflash : false
//				});
//			});
			$('#startmenu-container .startmenu a').on('click', function(){
				switch($(this).attr('class')){
					case 'help':
						HROS.base.help();
						break;
					case 'about':
						HROS.copyright.show();
						break;
				}
			});
		},
		/*
		**  获取头像
		*/
		getAvatar : function(){
			$.ajax({
				type : 'POST',
				url : ajaxUrl,
				data : 'ac=getAvatar'
			}).done(function(msg){
				$('#startmenu-container .startmenu-avatar img').attr('src', msg);
			});
		},
		/*
		**  账号设置窗口
		*/
		openAccount : function(){
			if(HROS.CONFIG.memberID != 0){
				HROS.window.createTemp({
					appid : 'zhsz',
					title : '账号设置',
					url : 'sysapp/account/index.php',
					width : 550,
					height : 580
				});
			}else{
				HROS.base.login();
			}
		},
		show : function(){
			HROS.popupMenu.hide();
			HROS.folderView.hide();
			HROS.searchbar.hide();
			$('#startmenu-container').css({
				top : 'auto',
				left : 'auto',
				right : 'auto',
				bottom : 'auto'
			}).show();
			switch(HROS.CONFIG.dockPos){
				case 'top':
					$('#startmenu-container').css({
						top : $('#dock-container').height() - 1,
						right : $('#dock-container').offset().left
					});
					break;
				case 'left':
					$('#startmenu-container').css({
						bottom : $('#dock-container').offset().top,
						left : $('#dock-container').width() - 1
					});
					break;
				case 'right':
					$('#startmenu-container').css({
						bottom : $('#dock-container').offset().top,
						right : $('#dock-container').width() - 1
					});
					break;
			}
		},
		hide : function(){
			$('#startmenu-container').hide();
		}
	}
})();/*
**  任务栏
*/
HROS.taskbar = (function(){
	return {
		/*
		**  初始化
		*/
		init : function(){
			//当浏览器窗口改变大小时，任务栏的显示也需进行刷新
			$(window).on('resize', function(){
				HROS.taskbar.resize();
			});
			//绑定任务栏点击事件
			HROS.taskbar.click();
			//绑定任务栏前进后退按钮事件
			HROS.taskbar.pageClick();
		},
		click : function(){
			$('#task-content-inner').on('click', 'a.task-item', function(){
				if($(this).hasClass('task-item-current')){
					HROS.window.hide($(this).attr('appid'));
				}else{
					HROS.window.show2top($(this).attr('appid'));
				}
			}).on('contextmenu', 'a.task-item', function(e){
				$('.popup-menu').hide();
				$('.quick_view_container').remove();
				var popupmenu = HROS.popupMenu.task($(this));
				var l = $(window).width() - e.clientX < popupmenu.width() ? e.clientX - popupmenu.width() : e.clientX;
				var t = e.clientY - popupmenu.height();
				popupmenu.css({
					left : l,
					top : t
				}).show();
				return false;
			});
		},
		pageClick : function(){
			$('#task-next-btn').on('click', function(){
				if($(this).hasClass('disable') == false){
					var w = $('#task-bar').width(), realW = $('#task-content-inner .task-item').length * 114, showW = w - 112, overW = realW - showW;
					var marginL = parseInt($('#task-content-inner').css('margin-left')) - 114;
					if(marginL <= overW * -1){
						marginL = overW * -1;
						$('#task-next a').addClass('disable');
					}
					$('#task-pre a').removeClass('disable');
					$('#task-content-inner').animate({
						marginLeft : marginL
					}, 200);
				}
			});
			$('#task-pre-btn').on('click', function(){
				if($(this).hasClass('disable') == false){
					var marginL = parseInt($('#task-content-inner').css('margin-left')) + 114;
					if(marginL >= 0){
						marginL = 0;
						$('#task-pre a').addClass('disable');
					}
					$('#task-next a').removeClass('disable');
					$('#task-content-inner').animate({
						marginLeft : marginL
					}, 200);
				}
			});
		},
		resize : function(){
			$('#task-content-inner').removeClass('fl');
			if(HROS.CONFIG.dockPos == 'left'){
				$('#task-bar').css({
					'left' : $('#dock-bar').width(),
					'right' : 0
				});
			}else if(HROS.CONFIG.dockPos == 'right'){
				$('#task-bar').css({
					'left' : 0,
					'right' : $('#dock-bar').width()
				});
				$('#task-content-inner').addClass('fl');
			}else{
				$('#task-bar').css({
					'left' : 0,
					'right' : 0
				});
			}
			var w = $('#task-bar').width(), realW = $('#task-content-inner .task-item').length * 114, showW = w - 112;
			$('#task-content-inner').css('width', realW);
			if(realW >= showW){
				$('#task-next, #task-pre').show();
				$('#task-content').css('width', showW);
				$('#task-content-inner').addClass('fl').stop(true, false).animate({
					marginLeft : 0
				}, 200);
				$('#task-next a').removeClass('disable');
				$('#task-pre a').addClass('disable');
			}else{
				$('#task-next, #task-pre').hide();
				$('#task-content').css('width','100%');
				$('#task-content-inner').css({
					'margin-left' : 0,
					'margin-right' : 0
				});
			}
		}
	}
})();HROS.uploadFile = (function(){
	var fileList = [];
	return {
		//获取上传文件对话框
		getDialog : function(){
			var tempData = [];
			for(var i = 0; i < fileList.length; i++){
				tempData.push({
					name : fileList[i].name,
					size : fileList[i].size < 1048576 ? Math.round(fileList[i].size / 1024) + ' kb' : Math.round(fileList[i].size / 1048576 * 100) / 100 + ' mb'
				});
			}
			var list = uploadFileDialogListTemp({
				list : tempData
			});
			//创建上传文件对话框，如果已打开则更新上传列表
			if(typeof($.dialog.list['uploadfile']) == 'object'){
				$('#uploadfile').html(list);
			}else{
				$.dialog({
					id : 'uploadfile',
					title : '上传文件',
					padding : 0,
					content : uploadFileDialogTemp({
						list : list
					}),
					button : [
						{
							name : '上传',
							callback : function(){
								//检测是否是拖拽文件到页面的操作
								if(fileList.length != 0){
									for(var i = 0, file; file = fileList[i]; i++){
										(function(file){
											var fd = new FormData();
											fd.append('xfile', file);
											var xhr = new XMLHttpRequest();
											if(xhr.upload){
												xhr.upload.addEventListener('progress', function(e){
													if(e.lengthComputable){
														$('#uploadfile .filelist:eq(' + file.index + ') .do').html('[&nbsp;--&nbsp;]');
														var loaded = Math.ceil(e.loaded / e.total * 100);
														$('#uploadfile .filelist:eq(' + file.index + ') .progress').css({
															width : loaded + '%'
														});
													}
												}, false);
												xhr.addEventListener('load', function(e){
													if(xhr.readyState == 4 && xhr.status == 200){
														var result = jQuery.parseJSON(e.target.responseText);
														if(result.error == null){
															$('#uploadfile .filelist:eq(' + file.index + ') .do').html('[&nbsp;√&nbsp;]');
														}else{
															$('#uploadfile .filelist:eq(' + file.index + ') .do').html('[&nbsp;×&nbsp;]').attr('title', result.error);
														}
													}
												}, false);
												xhr.open('post', 'ajax.php?ac=html5upload', true);
												xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
												xhr.send(fd);
											}
										})(file);
									}
									fileList = [];
								}
								return false;
							}
						},
						{
							name : '关闭',
							callback : function(){
								fileList = [];
								xhr = null;
							}
						}
					]
				});
			}
		},
		init : function(){
			//拖动上传文件
			if(window.FileReader){
				var oDragWrap = document.body;
				//拖进
				oDragWrap.addEventListener('dragenter', function(e){
					e.preventDefault();
				}, false);
				//拖离
				oDragWrap.addEventListener('dragleave', function(e){
					e.preventDefault();
				}, false);
				//拖来拖去，一定要注意dragover事件一定要清除默认事件，不然会无法触发后面的drop事件
				oDragWrap.addEventListener('dragover', function(e){
					e.preventDefault();
				}, false);
				//扔
				oDragWrap.addEventListener('drop', function(e){
					e.preventDefault();
					HROS.uploadFile.getDialog();
					getFiles(e);
					HROS.uploadFile.getDialog();
				}, false);
			}
			//普通上传
			$('body').on('change', '#uploadfilebtn', function(e){
				getFiles(e);
				HROS.uploadFile.getDialog();
			});
			//绑定删除事件
			$('body').on('click', '#uploadfile .del', function(){
				var list = $(this).parents('.filelist');
				var count = list.index();
				list.slideUp('slow', function(){
					$(this).remove();
				});
				//数据删除
				var tempList = [];
				for(var i = 0; i < fileList.length; i++){
					if(i != count){
						tempList.push(fileList[i]);
					}
				}
				fileList = tempList;
				refreshFiles();
				HROS.uploadFile.getDialog();
			});
			var getFiles = function(e){
				var files = e.target.files || e.dataTransfer.files;
				if(files.length != 0){
					var content = [];
					for(var i = 0; i < files.length; i++){
						if(files[i]['size'] > 104857600){
							content.push("\""+files[i]['name']+"\" 文件过大，请上传小于100MB的文件！")
						}else{
							fileList.push(files[i]);
						}
					}
					if(content != ''){
						contentHtml = content.join('<br>');
						$.dialog({
							padding : 10,
							content : contentHtml
						})
					}
				}
				refreshFiles();
			}
			var refreshFiles = function(){
				for(var i = 0; i < fileList.length; i++){
					fileList[i]['index'] = i;
				}
				console.log(fileList);
			}
		}
	}
})();/*
**  壁纸
*/
HROS.wallpaper = (function(){
	return {
		/*
		**	初始化
		*/
		init : function(){
			HROS.wallpaper.set();
		},
		/*
		**	获得壁纸
		**	通过ajax到后端获取壁纸信息，同时设置壁纸
		*/
		get : function(callback){
			$.ajax({
				type : 'POST',
				url : ajaxUrl,
				data : 'ac=getWallpaper',
				success : function(msg){
					var w = msg.split('<{|}>');
					HROS.CONFIG.wallpaperState = parseInt(w[0]);
					switch(HROS.CONFIG.wallpaperState){
						case 1:
						case 2:
							HROS.CONFIG.wallpaper = w[1];
							HROS.CONFIG.wallpaperType = w[2];
							HROS.CONFIG.wallpaperWidth = parseInt(w[3]);
							HROS.CONFIG.wallpaperHeight = parseInt(w[4]);
							break;
						case 3:
							HROS.CONFIG.wallpaper = w[1];
							break;
					}
					callback && callback();
				}
			});
		},
		/*
		**	设置壁纸
		**	平铺和居中可直接用css样式background解决
		**	而填充、适应和拉伸则需要进行模拟
		*/
		set : function(isreload){
			/*
			**  判断壁纸是否需要重新载入
			**  比如当浏览器尺寸改变时，只需更新壁纸，而无需重新载入
			*/
			var isreload = typeof(isreload) == 'undefined' ? true : isreload;
			if(isreload){
				$('#zoomWallpaperGrid').attr('id', 'zoomWallpaperGrid-ready2remove').css('zIndex', -11);
				setTimeout(function(){
					$('#zoomWallpaperGrid-ready2remove').remove();
					$('#zoomWallpaperGrid').removeClass('radi');
				}, 1500);
			}
			var w = $(window).width(), h = $(window).height();
			switch(HROS.CONFIG.wallpaperState){
				case 1:
				case 2:
					switch(HROS.CONFIG.wallpaperType){
						//平铺
						case 'pingpu':
							if(isreload){
								$('body').append('<div id="zoomWallpaperGrid" class="radi" style="position:absolute;z-index:-10;top:0;left:0;height:100%;width:100%;background:#fff url(' + HROS.CONFIG.wallpaper + ') repeat"></div>');
							}
							break;
						//居中
						case 'juzhong':
							if(isreload){
								$('body').append('<div id="zoomWallpaperGrid" class="radi" style="position:absolute;z-index:-10;top:0;left:0;height:100%;width:100%;background:#fff url(' + HROS.CONFIG.wallpaper + ') no-repeat 50% 50%"></div>');
							}
							break;
						//填充
						case 'tianchong':
							var t = (h - HROS.CONFIG.wallpaperHeight) / 2, l = (w - HROS.CONFIG.wallpaperWidth) / 2;
							if(isreload){
								$('body').append('<div id="zoomWallpaperGrid" class="radi" style="position:absolute;z-index:-10;left:0;top:0;overflow:hidden;height:' + h + 'px;width:' + w + 'px;background:#fff"><img id="zoomWallpaper" src="' + HROS.CONFIG.wallpaper + '" style="position:absolute;height:' + HROS.CONFIG.wallpaperHeight + 'px;width:' + HROS.CONFIG.wallpaperWidth + 'px;top:' + t + 'px;left:' + l + 'px"><div style="position:absolute;height:' + h + 'px;width:' + w + 'px;background:#fff;opacity:0;filter:alpha(opacity=0)"></div></div>');
							}else{
								$('#zoomWallpaperGrid, #zoomWallpaperGrid div').css({
									height : h + 'px',
									width : w + 'px'
								});
								$('#zoomWallpaper').css({
									top : t + 'px',
									left : l + 'px'
								});
							}
							break;
						//适应
						case 'shiying':
							var imgH, imgW, t, l;
							if(HROS.CONFIG.wallpaperHeight / HROS.CONFIG.wallpaperWidth > h / w){
								imgH = h;
								imgW = HROS.CONFIG.wallpaperWidth * (h / HROS.CONFIG.wallpaperHeight);
								t = 0;
								l = (w - imgW) / 2;
							}else if(HROS.CONFIG.wallpaperHeight / HROS.CONFIG.wallpaperWidth < h / w){
								imgW = w;
								imgH = HROS.CONFIG.wallpaperHeight * (w / HROS.CONFIG.wallpaperWidth);
								l = 0;
								t = (h - imgH) / 2;
							}else{
								imgH = HROS.CONFIG.wallpaperHeight;
								imgW = HROS.CONFIG.wallpaperWidth;
								t = l = 0;
							}
							if(isreload){
								$('body').append('<div id="zoomWallpaperGrid" class="radi" style="position:absolute;z-index:-10;left:0;top:0;overflow:hidden;height:' + h + 'px;width:' + w + 'px;background:#fff"><img id="zoomWallpaper" src="' + HROS.CONFIG.wallpaper + '" style="position:absolute;height:' + imgH + 'px;width:' + imgW + 'px;top:' + t + 'px;left:' + l + 'px"><div style="position:absolute;height:' + h + 'px;width:' + w + 'px;background:#fff;opacity:0;filter:alpha(opacity=0)"></div></div>');
							}else{
								$('#zoomWallpaperGrid, #zoomWallpaperGrid div').css({
									height : h + 'px',
									width : w + 'px'
								});
								$('#zoomWallpaper').css({
									height : imgH + 'px',
									width : imgW + 'px',
									top : t + 'px',
									left : l + 'px'
								});
							}
							break;
						//拉伸
						case 'lashen':
							if(isreload){
								$('body').append('<div id="zoomWallpaperGrid" class="radi" style="position:absolute;z-index:-10;left:0;top:0;overflow:hidden;height:' + h + 'px;width:' + w + 'px;background:#fff"><img id="zoomWallpaper" src="' + HROS.CONFIG.wallpaper + '" style="position:absolute;height:' + h + 'px;width:' + w + 'px;top:0;left:0"><div style="position:absolute;height:' + h + 'px;width:' + w + 'px;background:#fff;opacity:0;filter:alpha(opacity=0)"></div></div>');
							}else{
								$('#zoomWallpaperGrid').css({
									height : h + 'px',
									width : w + 'px'
								}).children('#zoomWallpaper, div').css({
									height : h + 'px',
									width : w + 'px'
								});
							}
							break;
					}
					break;
				case 3:
					if(isreload){
						$('body').append('<div id="zoomWallpaperGrid" class="radi" style="position:absolute;z-index:-10;top:0;left:0;height:100%;width:100%;overflow:hidden"><div></div><iframe id="iframeWallpaper" frameborder="no" border="0" scrolling="no" class="iframeWallpaper" style="position:absolute;left:0;top:0;overflow:hidden;width:100%;height:100%" src="' + HROS.CONFIG.wallpaper + '"></iframe></div>');
					}
					break;
			}
		},
		/*
		**	更新壁纸
		**	通过ajax到后端进行更新，同时获得壁纸
		*/
		update : function(wallpaperstate, wallpapertype, wallpaper){
			function done(){
				HROS.wallpaper.get(function(){
					HROS.wallpaper.set();
				});
			}
			if(HROS.base.checkLogin()){
				$.ajax({
					type : 'POST',
					url : ajaxUrl,
					data : 'ac=setWallpaper&wpstate=' + wallpaperstate + '&wptype=' + wallpapertype + '&wp=' + wallpaper
				}).done(function(responseText){
					done();
				});
			}else{
				done();
			}
		}
	}
})();/*
**  小挂件
*/
HROS.widget = (function(){
	return {
		init : function(){
			//挂件上各个按钮
			HROS.widget.handle();
			//挂件移动
			HROS.widget.move();
			//还原上次退出系统时widget的状态
			HROS.widget.reduction();
			$('#desk').on('mouseover', '.widget', function(){
				$(this).children('.move').show();
			}).on('mouseout', '.widget', function(){
				$(this).children('.move').hide();
			})
		},
		/*
		**  创建挂件
		**  自定义挂件：HROS.widget.createTemp({url,width,height,top,right});
		**       示例：HROS.widget.createTemp({url:"http://www.baidu.com",width:800,height:400,top:100,right:100});
		*/
		createTemp : function(obj){
			var appid = obj.appid == null ? Date.parse(new Date()) : obj.appid;
			//判断窗口是否已打开
			var iswidgetopen = false;
			$('#desk .widget').each(function(){
				if($(this).attr('realappid') == appid){
					iswidgetopen = true;
					return false;
				}
			});
			//如果没有打开，则进行创建
			if(!iswidgetopen){
				function nextDo(options){
					$('#desk').append(widgetWindowTemp({
						'width' : options.width,
						'height' : options.height,
						'type' : 'widgetTemp',
						'id' : 'w_' + options.appid,
						'appid' : options.appid,
						'realappid' : options.appid,
						'top' : options.top,
						'right' : options.right,
						'url' : options.url,
						'zIndex' : HROS.CONFIG.widgetIndexid,
						'issetbar' : 0
					}));
					HROS.CONFIG.widgetIndexid += 1;
				}
				nextDo({
					appid : appid,
					url : obj.url,
					width : obj.width,
					height : obj.height,
					top : obj.top == null ? 0 : obj.top,
					right : obj.right == null ? 0 : obj.right
				});
			}
		},
		create : function(realappid, type){
			var type = type == null ? 'widget' : type, appid;
			//判断窗口是否已打开
			var iswidgetopen = false;
			$('#desk .widget').each(function(){
				if($(this).attr('realappid') == realappid){
					iswidgetopen = true;
					appid = $(this).attr('appid');
					return false;
				}
			});
			//如果没有打开，则进行创建
			if(!iswidgetopen && $('#d_' + appid).attr('opening') != 1){
				$('#d_' + appid).attr('opening', 1);
				function nextDo(options){
					var widgetId = '#w_' + options.appid;
					if(HROS.widget.checkCookie(realappid, type)){
						var widgetState = $.parseJSON($.cookie(cookie_prefix + 'widgetState' + HROS.CONFIG.memberID));
						$(widgetState).each(function(){
							if(this.realappid == options.realappid && this.type == options.type){
								options.top = this.top;
								options.right = this.right;
							}
						});
					}else{
						HROS.widget.addCookie(options.realappid, options.type, 0, 0);
					}
					TEMP.widgetTemp = {
						'title' : options.title,
						'width' : options.width,
						'height' : options.height,
						'type' : options.type,
						'id' : 'w_' + options.appid,
						'appid' : options.appid,
						'realappid' : options.realappid == 0 ? options.appid : options.realappid,
						'top' : typeof(options.top) == 'undefined' ? 0 : options.top,
						'right' : typeof(options.right) == 'undefined' ? 0 : options.right,
						'url' : options.url,
						'zIndex' : HROS.CONFIG.widgetIndexid,
						'issetbar' : 1
					};
					$('#desk').append(widgetWindowTemp(TEMP.widgetTemp));
					$(widgetId).data('info', TEMP.widgetTemp);
					HROS.CONFIG.widgetIndexid += 1;
				}
				ZENG.msgbox.show('小挂件正在加载中，请耐心等待...', 6, 100000);
				$.ajax({
					type : 'POST',
					url : ajaxUrl,
					data : 'ac=getMyAppById&id=' + realappid + '&type=' + type
				}).done(function(widget){
					ZENG.msgbox._hide();
					widget = $.parseJSON(widget);
					if(widget != null){
						if(widget['error'] == 'ERROR_NOT_FOUND'){
							ZENG.msgbox.show('小挂件不存在，建议删除', 5, 2000);
							HROS.widget.removeCookie(realappid, type);
						}else if(widget['error'] == 'ERROR_NOT_INSTALLED'){
							HROS.window.createTemp({
								appid : 'hoorayos-yysc',
								title : '应用市场',
								url : 'sysapp/appmarket/index.php?id=' + realappid,
								width : 800,
								height : 484,
								isflash : false,
								refresh : true
							});
							HROS.widget.removeCookie(realappid, type);
						}else{
							nextDo({
								appid : widget['appid'],
								realappid : widget['realappid'],
								title : widget['name'],
								url : widget['url'],
								type : widget['type'],
								width : widget['width'],
								height : widget['height'],
								top : 0,
								right : 0
							});
						}
					}else{
						ZENG.msgbox.show('小挂件加载失败', 5, 2000);
					}
					$('#d_' + appid).attr('opening', 0);
				});
			}
		},
		//还原上次退出系统时widget的状态
		reduction : function(){
			var widgetState = $.parseJSON($.cookie(cookie_prefix + 'widgetState' + HROS.CONFIG.memberID));
			$(widgetState).each(function(){
				HROS.widget.create(this.realappid, this.type);
			});
		},
		//根据id验证是否存在cookie中
		checkCookie : function(realappid, type){
			var flag = false, widgetState = $.parseJSON($.cookie(cookie_prefix + 'widgetState' + HROS.CONFIG.memberID));
			$(widgetState).each(function(){
				if(this.realappid == realappid && this.type == type){
					flag = true;
				}
			});
			return flag;
		},
		/*
		**  以下2个方法：addCookie、removeCookie
		**  用于记录widget打开状态以及摆放位置
		**  实现用户再次登入系统时，还原上次widget的状态
		*/
		addCookie : function(realappid, type, top, right){
			if(type == 'widget' || type == 'pwidget'){
				var widgetState = $.parseJSON($.cookie(cookie_prefix + 'widgetState' + HROS.CONFIG.memberID));
				//检查是否存在，如果存在则更新，反之则添加
				if(HROS.widget.checkCookie(realappid, type)){
					$(widgetState).each(function(){
						if(this.realappid == realappid && this.type == type){
							this.top = top;
							this.right = right;
						}
					});
				}else{
					if(widgetState == null){
						widgetState = [];
					}
					widgetState.push({
						realappid : realappid,
						type : type,
						top : top,
						right : right
					});
				}
				$.cookie(cookie_prefix + 'widgetState' + HROS.CONFIG.memberID, $.toJSON(widgetState), {expires : 95});
			}
		},
		removeCookie : function(realappid, type){
			if(type == 'widget' || type == 'pwidget'){
				if(HROS.widget.checkCookie(realappid, type)){
					var widgetState = $.parseJSON($.cookie(cookie_prefix + 'widgetState' + HROS.CONFIG.memberID));
					$(widgetState).each(function(i){
						if(this.realappid == realappid && this.type == type){
							widgetState.splice(i, 1);
							return false;
						}
					});
					$.cookie(cookie_prefix + 'widgetState' + HROS.CONFIG.memberID, $.toJSON(widgetState), {expires : 95});
				}
			}
		},
		move : function(){
			$('#desk').on('mousedown', '.widget .move', function(e){
				var obj = $(this).parents('.widget');
				HROS.widget.show2top(obj.attr('appid'));
				var lay, x, y, t, r;
				x = e.clientX - obj.offset().left;
				y = e.clientY - obj.offset().top;
				//绑定鼠标移动事件
				$(document).on('mousemove', function(e){
					lay = HROS.maskBox.desk();
					lay.show();
					t = e.clientY - y;
					t = t < 0 ? 0 : t;
					r = e.clientX - x;
					r = $(window).width() - obj.width() - r;
					obj.css({
						top : t,
						right : r
					});
				}).on('mouseup', function(){
					$(this).off('mousemove').off('mouseup');
					if(typeof(lay) !== 'undefined'){
						lay.hide();
					}
					if(obj.attr('type') != 'widgetTemp'){
						HROS.widget.addCookie(obj.attr('realappid'), obj.attr('type'), t, r);
					}
				});
			});
		},
		close : function(appid){
			var widgetId = '#w_' + appid;
			HROS.widget.removeCookie($(widgetId).attr('realappid'), $(widgetId).attr('type'));
			$(widgetId).html('').remove();
		},
		show2top : function(appid){
			var widgetId = '#w_' + appid;
			$(widgetId).css('z-index', HROS.CONFIG.widgetIndexid);
			HROS.CONFIG.widgetIndexid += 1;
		},
		
		
		handle : function(){
			$('#desk').on('mousedown', '.widget a', function(e){
				e.preventDefault();
				e.stopPropagation();
			});
			$('#desk').on('click', '.widget .ha-close', function(e){
				var obj = $(this).parents('.widget');
				HROS.widget.close(obj.attr('appid'));
			}).on('click', '.widget .ha-star', function(){
				var obj = $(this).parents('.widget');
				$.ajax({
					type : 'POST',
					url : ajaxUrl,
					data : 'ac=getAppStar&id=' + obj.data('info').realappid
//				}).done(function(point){
//					$.dialog({
//						title : '给“' + obj.data('info').title + '”打分',
//						width : 250,
//						id : 'star',
//						content : starDialogTemp({
//							'point' : Math.floor(point),
//							'realpoint' : point * 20
//						})
//					});
				});
				$('body').off('click').on('click', '#star ul li', function(){
					var num = $(this).attr('num');
					var realappid = $(this).parent('ul').data('realappid');
					if(!isNaN(num) && /^[1-5]$/.test(num)){
						if(HROS.base.checkLogin()){
							$.ajax({
								type : 'POST',
								url : ajaxUrl,
								data : 'ac=updateAppStar&id=' + obj.data('info').realappid + '&starnum=' + num
//							}).done(function(responseText){
//								$.dialog.list['star'].close();
//								if(responseText){
//									ZENG.msgbox.show("打分成功！", 4, 2000);
//								}else{
//									ZENG.msgbox.show("你已经打过分了！", 1, 2000);
//								}
							});
						}else{
							HROS.base.login();
						}
					}
				});
//			}).on('click', '.widget .ha-share', function(){
//				var obj = $(this).parents('.widget');
//				$.dialog({
//					title : '分享应用',
//					width : 370,
//					id : 'share',
//					content : shareDialogTemp({
//						'sinaweiboAppkey' : HROS.CONFIG.sinaweiboAppkey == '' ? '1197457869' : HROS.CONFIG.sinaweiboAppkey,
//						'tweiboAppkey' : HROS.CONFIG.tweiboAppkey == '' ? '801356816' : HROS.CONFIG.tweiboAppkey,
//						'title' : '我正在使用 %23HoorayOS%23 中的 %23' + obj.data('info').title + '%23 应用，很不错哦，推荐你也来试试！',
//						'url' : HROS.CONFIG.website + '?run=' + obj.data('info').realappid + '%26type=widget'
//					})
//				});
//				$('body').off('click').on('click', '#share a', function(){
//					$.dialog.list['share'].close();
//				});
			});
		}
		
		
	}
})();
/*
**  应用窗口
*/
HROS.window = (function(){
	return {
		init : function(){
			//窗口上各个按钮
			HROS.window.handle();
			//窗口移动
			HROS.window.move();
			//窗口拉伸
			HROS.window.resize();
			//绑定窗口遮罩层点击事件
			$('#desk').on('click', '.window-container .window-mask, .window-container .folder_body', function(){
				HROS.window.show2top($(this).parents('.window-container').attr('appid'), true);
			});
			//屏蔽窗口右键
			$('#desk').on('contextmenu', '.window-container', function(){
				return false;
			});
			//绑定文件夹内应用点击事件
			$('#desk').on('click', '.folder_body li', function(){
				return false;
			}).on('contextmenu', '.folder_body .appbtn', function(e){
				$('.popup-menu').hide();
				$('.quick_view_container').remove();
				switch($(this).attr('type')){
					case 'window':
					case 'widget':
						var popupmenu = HROS.popupMenu.app($(this));
						break;
					case 'pwindow':
					case 'pwidget':
						var popupmenu = HROS.popupMenu.papp($(this));
						break;
				}
				var l = ($(window).width() - e.clientX) < popupmenu.width() ? (e.clientX - popupmenu.width()) : e.clientX;
				var t = ($(window).height() - e.clientY) < popupmenu.height() ? (e.clientY - popupmenu.height()) : e.clientY;
				popupmenu.css({
					left : l,
					top : t
				}).show();
				return false;
			});
		},
		/*
		**  创建窗口
		**  自定义窗口：HROS.window.createTemp({title,url,width,height,resize,isflash});
		**      后面参数依次为：标题、地址、宽、高、是否可拉伸、是否打开默认最大化、是否为flash
		**      示例：HROS.window.createTemp({title:"百度",url:"http://www.baidu.com",width:800,height:400,isresize:false,isopenmax:false,isflash:false});
		*/
		createTemp : function(obj){
			var type = 'window', appid = obj.appid == null ? Date.parse(new Date()) : obj.appid;
			//判断窗口是否已打开
			var iswindowopen = false;
			$('#task-content-inner a.task-item').each(function(){
				if($(this).attr('realappid') == appid){
					iswindowopen = true;
					HROS.window.show2top($(this).attr('appid'));
					return false;
				}
			});
			//如果没有打开，则进行创建
			if(!iswindowopen){
				function nextDo(options){
					var windowId = '#w_' + options.appid;
					//新增任务栏
					$('#task-content-inner').prepend(taskTemp({
						'type' : options.type,
						'id' : 't_' + options.appid,
						'appid' : options.appid,
						'realappid' : options.appid,
						'title' : options.title,
						'imgsrc' : options.imgsrc
					}));
					HROS.taskbar.resize();
					//新增窗口
					TEMP.windowTemp = {
						'top' : ($(window).height() - options.height) / 2 <= 0 ? 0 : ($(window).height() - options.height) / 2,
						'left' : ($(window).width() - options.width) / 2 <= 0 ? 0 : ($(window).width() - options.width) / 2,
						'emptyW' : $(window).width() - options.width,
						'emptyH' : $(window).height() - options.height,
						'width' : options.width,
						'height' : options.height,
						'zIndex' : HROS.CONFIG.windowIndexid,
						'type' : options.type,
						'id' : 'w_' + options.appid,
						'appid' : options.appid,
						'realappid' : options.appid,
						'title' : options.title,
						'url' : options.url,
						'imgsrc' : options.imgsrc,
						'isresize' : options.isresize,
						'isopenmax' : options.isopenmax,
						'istitlebar' : options.isresize,
						'istitlebarFullscreen' : options.isresize ? window.fullScreenApi.supportsFullScreen == true ? true : false : false,
						'issetbar' : options.issetbar,
						'isflash' : options.isflash
					};
					$('#desk').append(windowTemp(TEMP.windowTemp));
					$(windowId).data('info', TEMP.windowTemp);
					HROS.CONFIG.windowIndexid += 1;
					HROS.window.setPos(false);
					//iframe加载完毕后，隐藏loading遮罩层
					$(windowId + ' iframe').load(function(){
						$(windowId + ' .window-frame').children('div').eq(1).fadeOut();
					});
					HROS.window.show2top(options.appid);
				}
				nextDo({
					type : type,
					appid : appid,
					realappid : appid,
					imgsrc : 'img/ui/default_icon.png',
					title : obj.title,
					url : obj.url,
					width : obj.width,
					height : obj.height,
					isresize : typeof(obj.isresize) == 'undefined' ? false : obj.isresize,
					isopenmax : typeof(obj.isopenmax) == 'undefined' ? false : obj.isopenmax,
					issetbar : false,
					isflash : typeof(obj.isflash) == 'undefined' ? true : obj.isflash
				});
			}else{
				//如果设置强制刷新
				if(obj.refresh){
					var windowId = '#w_' + appid;
					$(windowId).find('iframe').attr('src', obj.url);
				}
			}
		},
		/*
		**  创建窗口
		**  系统窗口：HROS.window.create(realappid, [type]);
		**      示例：HROS.window.create(12);
		*/
		create : function(realappid, type){
			var type = type == null ? 'window' : type, appid;
			//判断窗口是否已打开
			var iswindowopen = false;
			$('#task-content-inner a.task-item').each(function(){
				if($(this).attr('realappid') == realappid){
					iswindowopen = true;
					appid = $(this).attr('appid');
					HROS.window.show2top(appid);
					return false;
				}
			});
			//如果没有打开，则进行创建
			if(!iswindowopen && $('#d_' + appid).attr('opening') != 1){
				$('#d_' + appid).attr('opening', 1);
				function nextDo(options){
					var windowId = '#w_' + options.appid;
					var top = ($(window).height() - options.height) / 2 <= 0 ? 0 : ($(window).height() - options.height) / 2;
					var left = ($(window).width() - options.width) / 2 <= 0 ? 0 : ($(window).width() - options.width) / 2;
					switch(options.type){
						case 'window':
						case 'pwindow':
							//新增任务栏
							$('#task-content-inner').prepend(taskTemp({
								'type' : options.type,
								'id' : 't_' + options.appid,
								'appid' : options.appid,
								'realappid' : options.realappid,
								'title' : options.title,
								'imgsrc' : options.imgsrc
							}));
							HROS.taskbar.resize();
							//新增窗口
							TEMP.windowTemp = {
								'top' : top,
								'left' : left,
								'emptyW' : $(window).width() - options.width,
								'emptyH' : $(window).height() - options.height,
								'width' : options.width,
								'height' : options.height,
								'zIndex' : HROS.CONFIG.windowIndexid,
								'type' : options.type,
								'id' : 'w_' + options.appid,
								'appid' : options.appid,
								'realappid' : options.realappid,
								'title' : options.title,
								'url' : options.url,
								'imgsrc' : options.imgsrc,
								'isresize' : options.isresize == 1 ? true : false,
								'isopenmax' : options.isresize == 1 ? options.isopenmax == 1 ? true : false : false,
								'istitlebar' : options.isresize == 1 ? true : false,
								'istitlebarFullscreen' : options.isresize == 1 ? window.fullScreenApi.supportsFullScreen == true ? true : false : false,
								'issetbar' : options.issetbar == 1 ? true : false,
								'isflash' : options.isflash == 1 ? true : false
							};
							$('#desk').append(windowTemp(TEMP.windowTemp));
							$(windowId).data('info', TEMP.windowTemp);
							HROS.CONFIG.windowIndexid += 1;
							HROS.window.setPos(false);
							//iframe加载完毕后，隐藏loading遮罩层
							$(windowId + ' iframe').load(function(){
								$(windowId + ' .window-frame').children('div').fadeOut();
							});
							HROS.window.show2top(options.appid);
							break;
						case 'folder':
							//新增任务栏
							$('#task-content-inner').prepend(taskTemp({
								'type' : options.type,
								'id' : 't_' + options.appid,
								'appid' : options.appid,
								'realappid' : options.realappid,
								'title' : options.title,
								'imgsrc' : options.imgsrc
							}));
							HROS.taskbar.resize();
							//新增窗口
							TEMP.folderWindowTemp = {
								'top' : top,
								'left' : left,
								'emptyW' : $(window).width() - options.width,
								'emptyH' : $(window).height() - options.height,
								'width' : options.width,
								'height' : options.height,
								'zIndex' : HROS.CONFIG.windowIndexid,
								'type' : options.type,
								'id' : 'w_' + options.appid,
								'appid' : options.appid,
								'realappid' : options.realappid,
								'title' : options.title,
								'imgsrc' : options.imgsrc
							};
							$('#desk').append(folderWindowTemp(TEMP.folderWindowTemp));
							$(windowId).data('info', TEMP.folderWindowTemp);
							HROS.CONFIG.windowIndexid += 1;
							HROS.window.setPos(false);
							//载入文件夹内容
							var sc = '';
							$(HROS.VAR.folder).each(function(){
								if(this.appid == options.appid){
									sc = this.apps;
									return false;
								}
							});
							if(sc != ''){
								var folder_append = '';
								$(sc).each(function(){
									folder_append += appbtnTemp({
										'title' : this.name,
										'type' : this.type,
										'id' : 'd_' + this.appid,
										'appid' : this.appid,
										'realappid' : this.realappid,
										'imgsrc' : this.icon
									});
								});
								$(windowId).find('.folder_body').append(folder_append);
							}
							HROS.window.show2top(options.appid);
							break;
					}
				}
				ZENG.msgbox.show('应用正在加载中，请耐心等待...', 6, 100000);
				$.ajax({
					type : 'POST',
					url : ajaxUrl,
					data : 'ac=getMyAppById&id=' + realappid + '&type=' + type
				}).done(function(app){
					ZENG.msgbox._hide();
					app = $.parseJSON(app);
					if(app != null){
						if(app['error'] == 'ERROR_NOT_FOUND'){
							ZENG.msgbox.show('应用不存在，建议删除', 5, 2000);
						}else if(app['error'] == 'ERROR_NOT_INSTALLED'){
							HROS.window.createTemp({
								appid : 'hoorayos-yysc',
								title : '应用市场',
								url : 'sysapp/appmarket/index.php?id=' + realappid,
								width : 800,
								height : 484,
								isflash : false,
								refresh : true
							});
						}else{
							nextDo({
								type : app['type'],
								appid : app['appid'],
								realappid : app['realappid'],
								title : app['name'],
								imgsrc : app['icon'],
								url : app['url'],
								width : app['width'],
								height : app['height'],
								isresize : app['isresize'],
								isopenmax : app['isopenmax'],
								issetbar : app['issetbar'],
								isflash : app['isflash']
							});
						}
					}else{
						ZENG.msgbox.show('数据拉取失败', 5, 2000);
					}
					$('#d_' + appid).attr('opening', 0);
				});
			}
		},
		setPos : function(isAnimate){
			isAnimate = isAnimate == null ? true : isAnimate;
			$('#desk .window-container').each(function(){
				var windowdata = $(this).data('info');
				var currentW = $(window).width() - $(this).width();
				var currentH = $(window).height() - $(this).height();
				var left = windowdata['left'] / windowdata['emptyW'] * currentW >= currentW ? currentW : windowdata['left'] / windowdata['emptyW'] * currentW;
				left = left <= 0 ? 0 : left;
				var top = windowdata['top'] / windowdata['emptyH'] * currentH >= currentH ? currentH : windowdata['top'] / windowdata['emptyH'] * currentH;
				top = top <= 0 ? 0 : top;
				if($(this).attr('state') != 'hide'){
					$(this).stop(true, false).animate({
						'left' : left,
						'top' : top
					}, isAnimate ? 500 : 0, function(){
						windowdata['left'] = left;
						windowdata['top'] = top;
						windowdata['emptyW'] = $(window).width() - $(this).width();
						windowdata['emptyH'] = $(window).height() - $(this).height();
					});
				}else{
					windowdata['left'] = left;
					windowdata['top'] = top;
					windowdata['emptyW'] = $(window).width() - $(this).width();
					windowdata['emptyH'] = $(window).height() - $(this).height();
				}
			});
		},
		close : function(appid){
			var windowId = '#w_' + appid, taskId = '#t_' + appid;
			$(windowId).removeData('info').html('').remove();
			$('#task-content-inner ' + taskId).html('').remove();
			$('#task-content-inner').css('width', $('#task-content-inner .task-item').length * 114);
			$('#task-bar, #nav-bar').removeClass('min-zIndex');
			HROS.taskbar.resize();
			if(appid=="275"){
				$.ajax({
			        type: 'GET',
			        async: false,
			        url:"../../user/getEmailInfo",
			        data:{},
			        dataType: "json",
			        error: function() {
			        },
			        success: function(data) {
						if(data!=null){
							$("#email_exit").attr("src","http://"+data.url+"/extmail/cgi/index.cgi?__mode=logout");
						}
					}
				});
			}
		},
		closeAll : function(){
			$('#desk .window-container').each(function(){
				HROS.window.close($(this).attr('appid'));
			});
		},
		hide : function(appid){
			var windowId = '#w_' + appid, taskId = '#t_' + appid;
			$(windowId).css('left', -10000).attr('state', 'hide');
			$('#task-content-inner ' + taskId).removeClass('task-item-current');
			if($(windowId).attr('ismax') == 1){
				$('#task-bar, #nav-bar').removeClass('min-zIndex');
			}
		},
		hideAll : function(){
			$('#task-content-inner a.task-item').removeClass('task-item-current');
			$('#desk-' + HROS.CONFIG.desk).nextAll('div.window-container').css('left', -10000).attr('state', 'hide');
		},
		max : function(appid){
			HROS.window.show2top(appid);
			var windowId = '#w_' + appid, taskId = '#t_' + appid;
			$(windowId + ' .title-handle .ha-max').hide().next(".ha-revert").show();
			$(windowId).addClass('window-maximize').attr('ismax',1).animate({
				width : '100%',
				height : '100%',
				top : 0,
				left : 0
			}, 200);
			$('#task-bar, #nav-bar').addClass('min-zIndex');
		},
		revert : function(appid){
			HROS.window.show2top(appid);
			var windowId = '#w_' + appid, taskId = '#t_' + appid;
			$(windowId + ' .title-handle .ha-revert').hide().prev('.ha-max').show();
			var obj = $(windowId), windowdata = obj.data('info');
			obj.removeClass('window-maximize').attr('ismax',0).animate({
				width : windowdata['width'],
				height : windowdata['height'],
				left : windowdata['left'],
				top : windowdata['top']
			}, 500);
			$('#task-bar, #nav-bar').removeClass('min-zIndex');
		},
		refresh : function(appid){
			var windowId = '#w_' + appid, taskId = '#t_' + appid;
			//判断是应用窗口，还是文件夹窗口
			if($(windowId + '_iframe').length != 0){
				$(windowId + '_iframe').attr('src', $(windowId + '_iframe').attr('src'));
			}else{
				HROS.window.updateFolder(appid);
			}
		},
		show2top : function(appid, isAnimate){
			isAnimate = isAnimate == null ? false : isAnimate;
			var windowId = '#w_' + appid, taskId = '#t_' + appid;
			var windowdata = $(windowId).data('info');
			var arr = [];
			function show(){
				HROS.window.show2under();
				//改变当前任务栏样式
				$('#task-content-inner ' + taskId).addClass('task-item-current');
				if($(windowId).attr('ismax') == 1){
					$('#task-bar, #nav-bar').addClass('min-zIndex');
				}
				//改变当前窗口样式
				$(windowId).addClass('window-current').css({
					'z-index' : HROS.CONFIG.windowIndexid,
					'left' : windowdata['left'],
					'top' : windowdata['top']
				}).attr('state', 'show');
				//如果窗口最小化前是最大化状态的，则坐标位置设为0
				if($(windowId).attr('ismax') == 1){
					$(windowId).css({
						'left' : 0,
						'top' : 0
					});
				}
				//改变当前窗口遮罩层样式
				$(windowId + ' .window-mask').hide();
				//改变当前iframe显示
				$(windowId + ' iframe').show();
				HROS.CONFIG.windowIndexid += 1;
			}
			if(isAnimate){
				var baseStartX = $(windowId).offset().left, baseEndX = baseStartX + $(windowId).width();
				var baseStartY = $(windowId).offset().top, baseEndY = baseStartY + $(windowId).height();
				var baseCenterX = baseStartX + ($(windowId).width() / 2), baseCenterY = baseStartY + ($(windowId).height() / 2);
				var baseZIndex = parseInt($(windowId).css('zIndex'));
				$('#desk .window-container:not(' + windowId + ')').each(function(){
					var thisStartX = $(this).offset().left, thisEndX = thisStartX + $(this).width();
					var thisStartY = $(this).offset().top, thisEndY = thisStartY + $(this).height();
					var thisCenterX = thisStartX + ($(this).width() / 2), thisCenterY = thisStartY + ($(this).height() / 2);
					var thisZIndex = parseInt($(this).css('zIndex'));
					var flag = '';
					if(thisZIndex > baseZIndex){
						//  常规情况，只要有一个角处于区域内，则可以判断窗口有覆盖
						//   _______            _______        _______    _______
						//  |    ___|___    ___|       |   ___|___    |  |       |___
						//  |   |       |  |   |       |  |       |   |  |       |   |
						//  |___|       |  |   |_______|  |       |___|  |_______|   |
						//      |_______|  |_______|      |_______|          |_______|
						if(
							(thisStartX >= baseStartX && thisStartX <= baseEndX && thisStartY >= baseStartY && thisStartY <= baseEndY)
							||
							(thisStartX >= baseStartX && thisStartX <= baseEndX && thisEndY >= baseStartY && thisEndY <= baseEndY)
							||
							(thisEndX >= baseStartX && thisEndX <= baseEndX && thisStartY >= baseStartY && thisStartY <= baseEndY)
							||
							(thisEndX >= baseStartX && thisEndX <= baseEndX && thisEndY >= baseStartY && thisEndY <= baseEndY)
						){
							flag = 'x';
						}
						//  非常规情况
						//       _______    _______          _____
						//   ___|       |  |       |___    _|     |___
						//  |   |       |  |       |   |  | |     |   |
						//  |___|       |  |       |___|  |_|     |___|
						//      |_______|  |_______|        |_____|
						if(
							(thisStartX >= baseStartX && thisStartX <= baseEndX && thisStartY < baseStartY && thisEndY > baseEndY)
							||
							(thisEndX >= baseStartX && thisEndX <= baseEndX && thisStartY < baseStartY && thisEndY > baseEndY)
						){
							flag = 'x';
						}
						//      _____       ___________      _____
						//   __|_____|__   |           |   _|_____|___
						//  |           |  |           |  |           |
						//  |           |  |___________|  |___________|
						//  |___________|     |_____|       |_____|
						if(
							(thisStartY >= baseStartY && thisStartY <= baseEndY && thisStartX < baseStartX && thisEndX > baseEndX)
							||
							(thisEndY >= baseStartY && thisEndY <= baseEndY && thisStartX < baseStartX && thisEndX > baseEndX)
						){
							flag = 'y';
						}
						//  两个角处于区域内，另外两种情况不用处理，因为这两种情况下，被移动的窗口是需要进行上下滑动，而非左右
						//      _____       ___________
						//   __|     |__   |   _____   |
						//  |  |     |  |  |  |     |  |
						//  |  |_____|  |  |__|     |__|
						//  |___________|     |_____|
						if(
							(thisStartX >= baseStartX && thisStartX <= baseEndX && thisEndY >= baseStartY && thisEndY <= baseEndY)
							&&
							(thisEndX >= baseStartX && thisEndX <= baseEndX && thisEndY >= baseStartY && thisEndY <= baseEndY)
							||
							(thisStartX >= baseStartX && thisStartX <= baseEndX && thisStartY >= baseStartY && thisStartY <= baseEndY)
							&&
							(thisEndX >= baseStartX && thisEndX <= baseEndX && thisStartY >= baseStartY && thisStartY <= baseEndY)
						){
							flag = 'y';
						}
					}
					if(flag != ''){
						var direction, distance;
						if(flag == 'x'){
							if(thisCenterX > baseCenterX){
								direction = 'right';
								distance = baseEndX - thisStartX + 30;
							}else{
								direction = 'left';
								distance = thisEndX - baseStartX + 30;
							}
						}else{
							if(thisCenterY > baseCenterY){
								direction = 'bottom';
								distance = baseEndY - thisStartY + 30;
							}else{
								direction = 'top';
								distance = thisEndY - baseStartY + 30;
							}
						}
						arr.push({
							id : $(this).attr('id'),
							direction : direction, //移动方向
							distance : distance //移动距离
						});
					}
				});
				//开始移动
				var delayTime = 0;
				for(var i = 0; i < arr.length; i++){
					var baseLeft = $('#' + arr[i].id).offset().left, baseTop = $('#' + arr[i].id).offset().top;
					if(arr[i].direction == 'left'){
						$('#' + arr[i].id).delay(delayTime).animate({
							left : baseLeft - arr[i].distance
						}, 300).animate({
							left : baseLeft
						}, 300);
					}else if(arr[i].direction == 'right'){
						$('#' + arr[i].id).delay(delayTime).animate({
							left : baseLeft + arr[i].distance
						}, 300).animate({
							left : baseLeft
						}, 300);
					}else if(arr[i].direction == 'top'){
						$('#' + arr[i].id).delay(delayTime).animate({
							top : baseTop - arr[i].distance
						}, 300).animate({
							top : baseTop
						}, 300);
					}else if(arr[i].direction == 'bottom'){
						$('#' + arr[i].id).delay(delayTime).animate({
							top : baseTop + arr[i].distance
						}, 300).animate({
							top : baseTop
						}, 300);
					}
					delayTime += 100;
				}
				setTimeout(show, delayTime + 100);
			}else{
				show();
			}
		},
		show2under : function(){
			//改变任务栏样式
			$('#task-content-inner a.task-item').removeClass('task-item-current');
			//改变窗口样式
			$('#desk .window-container').removeClass('window-current');
			//改变窗口遮罩层样式
			$('#desk .window-container .window-mask').show();
			//改变iframe显示
			$('#desk .window-container-flash iframe').hide();
		},
		updateFolder : function(appid){
			var windowId = '#w_' + appid, taskId = '#t_' + appid;
			var sc = '';
			$(HROS.VAR.folder).each(function(){
				if(this.appid == appid){
					sc = this.apps;
					return false;
				}
			});
			if(sc != null){
				var folder_append = '';
				for(var i = 0; i < sc.length; i++){
					folder_append += appbtnTemp({
						'top' : 0,
						'left' : 0,
						'title' : sc[i]['name'],
						'type' : sc[i]['type'],
						'id' : 'd_' + sc[i]['appid'],
						'appid' : sc[i]['appid'],
						'realappid' : sc[i]['realappid'],
						'imgsrc' : sc[i]['icon']
					});
				}
				$(windowId).find('.folder_body').html('').append(folder_append).on('contextmenu', '.appbtn', function(e){
					$('.popup-menu').hide();
					$('.quick_view_container').remove();
					TEMP.AppRight = HROS.popupMenu.app($(this));
					var l = ($(window).width() - e.clientX) < TEMP.AppRight.width() ? (e.clientX - TEMP.AppRight.width()) : e.clientX;
					var t = ($(window).height() - e.clientY) < TEMP.AppRight.height() ? (e.clientY - TEMP.AppRight.height()) : e.clientY;
					TEMP.AppRight.css({
						left : l,
						top : t
					}).show();
					return false;
				});
			}
		},
		handle : function(){
			$('#desk').on('mousedown', '.window-container .title-bar .title-handle a', function(e){
				e.preventDefault();
				e.stopPropagation();
			});
			$('#desk').on('dblclick', '.window-container .title-bar', function(e){
				var obj = $(this).parents('.window-container');
				//判断当前窗口是否已经是最大化
				if(obj.find('.ha-max').is(':hidden')){
					obj.find('.ha-revert').click();
				}else{
					obj.find('.ha-max').click();
				}
			}).on('click', '.window-container .ha-hide', function(){
				var obj = $(this).parents('.window-container');
				HROS.window.hide(obj.attr('appid'));
			}).on('click', '.window-container .ha-max', function(){
				var obj = $(this).parents('.window-container');
				HROS.window.max(obj.attr('appid'));
			}).on('click', '.window-container .ha-revert', function(){
				var obj = $(this).parents('.window-container');
				HROS.window.revert(obj.attr('appid'));
			}).on('click', '.window-container .ha-fullscreen', function(){
				var obj = $(this).parents('.window-container');
				window.fullScreenApi.requestFullScreen(document.getElementById(obj.find('iframe').attr('id')));
			}).on('click', '.window-container .ha-close', function(){
				var obj = $(this).parents('.window-container');
				HROS.window.close(obj.attr('appid'));
			}).on('click', '.window-container .refresh', function(){
				var obj = $(this).parents('.window-container');
				HROS.window.refresh(obj.attr('appid'));
			}).on('click', '.window-container .detail', function(){
				var obj = $(this).parents('.window-container');
				if(obj.attr('realappid') !== 0){
					HROS.window.createTemp({
						appid : 'hoorayos-yysc',
						title : '应用市场',
						url : 'sysapp/appmarket/index.php?id=' + obj.attr('realappid'),
						width : 800,
						height : 484,
						isflash : false,
						refresh : true
					});
				}else{
					ZENG.msgbox.show('对不起，该应用没有任何详细介绍', 1, 2000);
				}
			}).on('contextmenu', '.window-container', function(){
				$('.popup-menu').hide();
				$('.quick_view_container').remove();
				return false;
			}).on('click', '.window-container .star', function(){
				var obj = $(this).parents('.window-container');
				$.ajax({
					type : 'POST',
					url : ajaxUrl,
					data : 'ac=getAppStar&id=' + obj.data('info').realappid
//				}).done(function(point){
//					$.dialog({
//						title : '给“' + obj.data('info').title + '”打分',
//						width : 250,
//						id : 'star',
//						content : starDialogTemp({
//							'point' : point,
//							'realpoint' : point * 20
//						})
//					});
				});
				$('body').off('click').on('click', '#star ul li', function(){
					var num = $(this).attr('num');
					var realappid = $(this).parent('ul').data('realappid');
					if(!isNaN(num) && /^[1-5]$/.test(num)){
						if(HROS.base.checkLogin()){
							$.ajax({
								type : 'POST',
								url : ajaxUrl,
								data : 'ac=updateAppStar&id=' + obj.data('info').realappid + '&starnum=' + num
//							}).done(function(responseText){
//								$.dialog.list['star'].close();
//								if(responseText){
//									ZENG.msgbox.show("打分成功！", 4, 2000);
//								}else{
//									ZENG.msgbox.show("你已经打过分了！", 1, 2000);
//								}
							});
						}else{
							HROS.base.login();
						}
					}
				});
//			}).on('click', '.window-container .share', function(){
//				var obj = $(this).parents('.window-container');
//				$.dialog({
//					title : '分享应用',
//					width : 370,
//					id : 'share',
//					content : shareDialogTemp({
//						'sinaweiboAppkey' : HROS.CONFIG.sinaweiboAppkey == '' ? '1197457869' : HROS.CONFIG.sinaweiboAppkey,
//						'tweiboAppkey' : HROS.CONFIG.tweiboAppkey == '' ? '801356816' : HROS.CONFIG.tweiboAppkey,
//						'title' : '我正在使用 %23HoorayOS%23 中的 %23' + obj.data('info').title + '%23 应用，很不错哦，推荐你也来试试！',
//						'url' : HROS.CONFIG.website + '?run=' + obj.data('info').realappid + '%26type=app'
//					})
//				});
//				$('body').off('click').on('click', '#share a', function(){
//					$.dialog.list['share'].close();
//				});
			}).on('contextmenu', '.window-container', function(){
				$('.popup-menu').hide();
				$('.quick_view_container').remove();
				return false;
			});
		},
		move : function(){
			$('#desk').on('mousedown', '.window-container .title-bar', function(e){
				var obj = $(this).parents('.window-container');
				if(obj.attr('ismax') == 1){
					return false;
				}
				HROS.window.show2top(obj.attr('appid'));
				var windowdata = obj.data('info'), lay, x, y;
				x = e.clientX - obj.offset().left;
				y = e.clientY - obj.offset().top;
				//绑定鼠标移动事件
				$(document).on('mousemove', function(e){
					lay = HROS.maskBox.desk();
					lay.show();
					//强制把右上角还原按钮隐藏，最大化按钮显示
					obj.find('.ha-revert').hide().prev('.ha-max').show();
					_l = e.clientX - x;
					_t = e.clientY - y;
					_w = windowdata['width'];
					_h = windowdata['height'];
					//窗口贴屏幕顶部10px内 || 底部60px内
					_t = _t <= 10 ? 0 : _t >= lay.height()-30 ? lay.height()-30 : _t;
					obj.css({
						width : _w,
						height : _h,
						left : _l,
						top : _t
					});
					obj.data('info').left = obj.offset().left;
					obj.data('info').top = obj.offset().top;
				}).on('mouseup', function(){
					$(this).off('mousemove').off('mouseup');
					if(typeof(lay) !== 'undefined'){
						lay.hide();
					}
				});
			});
		},
		resize : function(obj){
			$('#desk').on('mousedown', '.window-container .window-resize', function(e){
				var obj = $(this).parents('.window-container');
				//增加背景遮罩层
				var resizeobj = $(this), lay, x = e.clientX, y = e.clientY, w = obj.width(), h = obj.height();
				$(document).on('mousemove', function(e){
					lay = HROS.maskBox.desk();
					lay.show();
					_x = e.clientX;
					_y = e.clientY;
					//当拖动到屏幕边缘时，自动贴屏
					_x = _x <= 10 ? 0 : _x >= (lay.width()-12) ? (lay.width()-2) : _x;
					_y = _y <= 10 ? 0 : _y >= (lay.height()-12) ? lay.height() : _y;
					switch(resizeobj.attr('resize')){
						case 't':
							h + y - _y > HROS.CONFIG.windowMinHeight ? obj.css({
								height : h + y - _y,
								top : _y
							}) : obj.css({
								height : HROS.CONFIG.windowMinHeight
							});
							break;
						case 'r':
							w - x + _x > HROS.CONFIG.windowMinWidth ? obj.css({
								width : w - x + _x
							}) : obj.css({
								width : HROS.CONFIG.windowMinWidth
							});
							break;
						case 'b':
							h - y + _y > HROS.CONFIG.windowMinHeight ? obj.css({
								height : h - y + _y
							}) : obj.css({
								height : HROS.CONFIG.windowMinHeight
							});
							break;
						case 'l':
							w + x - _x > HROS.CONFIG.windowMinWidth ? obj.css({
								width : w + x - _x,
								left : _x
							}) : obj.css({
								width : HROS.CONFIG.windowMinWidth
							});
							break;
						case 'rt':
							h + y - _y > HROS.CONFIG.windowMinHeight ? obj.css({
								height : h + y - _y,
								top : _y
							}) : obj.css({
								height : HROS.CONFIG.windowMinHeight
							});
							w - x + _x > HROS.CONFIG.windowMinWidth ? obj.css({
								width : w - x + _x
							}) : obj.css({
								width : HROS.CONFIG.windowMinWidth
							});
							break;
						case 'rb':
							w - x + _x > HROS.CONFIG.windowMinWidth ? obj.css({
								width : w - x + _x
							}) : obj.css({
								width : HROS.CONFIG.windowMinWidth
							});
							h - y + _y > HROS.CONFIG.windowMinHeight ? obj.css({
								height : h - y + _y
							}) : obj.css({
								height : HROS.CONFIG.windowMinHeight
							});
							break;
						case 'lt':
							w + x - _x > HROS.CONFIG.windowMinWidth ? obj.css({
								width : w + x - _x,
								left : _x
							}) : obj.css({
								width : HROS.CONFIG.windowMinWidth
							});
							h + y - _y > HROS.CONFIG.windowMinHeight ? obj.css({
								height : h + y - _y,
								top : _y
							}) : obj.css({
								height : HROS.CONFIG.windowMinHeight
							});
							break;
						case 'lb':
							w + x - _x > HROS.CONFIG.windowMinWidth ? obj.css({
								width : w + x - _x,
								left : _x
							}) : obj.css({
								width : HROS.CONFIG.windowMinWidth
							});
							h - y + _y > HROS.CONFIG.windowMinHeight ? obj.css({
								height : h - y + _y
							}) : obj.css({
								height : HROS.CONFIG.windowMinHeight
							});
							break;
					}
				}).on('mouseup',function(){
					if(typeof(lay) !== 'undefined'){
						lay.hide();
					}
					obj.data('info').width = obj.width();
					obj.data('info').height = obj.height();
					obj.data('info').left = obj.offset().left;
					obj.data('info').top = obj.offset().top;
					obj.data('info').emptyW = $(window).width() - obj.width();
					obj.data('info').emptyH = $(window).height() - obj.height();
					$(this).off('mousemove').off('mouseup');
				});
			});
		}
	}
})();/*
**  该功能是从QQ空间里提取出来的
**  用于判断页面是否处于缩放状态中，并给予提示
**  可在浏览页时按住ctrl+鼠标滚轮进行测试预览
*/
HROS.zoom = (function(){
	return {
		/*
		**  初始化
		**  其实也不用初始化，可以直接把object代码写在页面上
		**  需要注意的是onchange参数，调用的是HROS.zoom.check方法
		*/
		init : function(){
			$('body').append('<div id="zoombox"></div>');
			/*
			**  使用SWFObject.js插入flash
			**  http://www.cnblogs.com/wuxinxi007/archive/2009/10/27/1590709.html
			*/
			swfobject.embedSWF('js/zoom.swf?onchange=HROS.zoom.check', 'zoombox', '10', '10', '6.0.0', 'expressInstall.swf', '', {allowScriptAccess : 'always', wmode : 'transparent', scale : 'noScale'}, {id : 'accessory_zoom', name : 'zoom_detect'});
		},
		/*
		**  为什么会有个参数o？其实我也不知道
		**  o.scale的值是数字，当o.scale大于1时，页面处于放大状态，反之则为缩小状态
		*/
		check : function(o){
//			var s = o.scale, m = s > 1 ? '放大' : '缩小';
//			if(s != 1){
//				HROS.VAR.zoomLevel = s;
//				$('#zoom-tip').show().find('span').text('您的浏览器目前处于' + m + '状态，会导致显示不正常，您可以键盘按“ctrl+数字0”组合键恢复初始状态！');
//			}else{
//				if(s != HROS.VAR.zoomLevel){
					$('#zoom-tip').fadeOut();
//				}
//			}
		},
		/*
		**  关闭，其实是删除，如果想做关闭，把代码改成hide()即可
		*/
		close : function(){
			$('#zoom-tip').remove();
		}
	}
})();